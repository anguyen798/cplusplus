WEBVTT

00:05.360 --> 00:06.010
Hello, everyone.

00:06.020 --> 00:12.170
In the last video we learned about un scoped enumerations, that is enumerations, whose enumerators

00:12.170 --> 00:17.120
are unqualified and they are visible throughout the scope in which the enumerator was declared.

00:17.630 --> 00:23.630
In this video we'll learn about the other side of the coin scope enumerations that is enumerations,

00:23.630 --> 00:30.110
whose enumerators are qualified and therefore they're only visible by using the scope resolution Operator.

00:30.870 --> 00:36.690
This means that if we want to access an enumerations enumerators, we must specify which enumeration

00:36.690 --> 00:38.280
the enumerator belongs to.

00:39.090 --> 00:44.010
In place of the singular enum, a keyword used to declare us scoped enumerations.

00:44.160 --> 00:48.660
We declare scoped enumerations using the enum class key.

00:49.290 --> 00:53.760
We can also use enum struct and they are both semantically equivalent.

00:54.270 --> 00:57.780
So you're probably wondering why do we even need scoped enumerations?

00:58.110 --> 01:03.570
Well, you may remember me saying that scoped enumerations can sometimes cause issues that can only

01:03.570 --> 01:05.760
be resolved by using scoped enumerations.

01:05.760 --> 01:10.170
So let's take a look at two motivating examples so you can understand why.

01:12.450 --> 01:15.330
Here we can see two UN scoped enumerations.

01:15.810 --> 01:21.060
The first one contains species of whales and the other species of sharks.

01:21.420 --> 01:26.760
Now suppose we want to determine whether a beluga whale is equivalent to a hammerhead shark?

01:27.920 --> 01:30.630
Because both enumerations are un scoped.

01:30.650 --> 01:36.860
This is a valid comparison and even worse it'll evaluate to true since both the numerators have the

01:36.860 --> 01:38.900
same underlying value of one.

01:39.260 --> 01:44.270
Obviously this is not what we want since a beluga whale is certainly not equivalent to a hammerhead

01:44.270 --> 01:44.870
shark.

01:45.610 --> 01:51.040
Another issue that can arise from the use of UN scoped enumerations are name clashes.

01:52.620 --> 01:57.090
Suppose that we want to include the blue shark species in our shark enumeration.

01:57.450 --> 02:03.240
You'll notice that it has the same enumerator name as the blue whale species because both enumerations

02:03.240 --> 02:04.140
are un scoped.

02:04.170 --> 02:09.180
The compiler will think we're trying to re declare the enumerator blue and it will generate an error.

02:09.970 --> 02:14.950
Of course, we could just rename the enumerator to something more specific, but in general, we don't

02:14.950 --> 02:17.530
want to have to worry about naming our enumerators.

02:17.710 --> 02:20.020
So what can we do to address this issue?

02:20.710 --> 02:25.270
As you've probably already guessed, we can declare the Enumerations as scoped enumerations.

02:27.240 --> 02:33.390
The use of if and switch statements with scoped enumerations is identical to that of un scoped, but

02:33.390 --> 02:36.990
with the additional requirement of specifying enumerator scopes.

02:37.500 --> 02:42.660
In fact, everything you can do with an scoped enumeration, you can do with a scoped enumeration,

02:42.660 --> 02:45.700
so long as you specify the scope of its enumerators.

02:45.720 --> 02:49.290
With that said, there is one difference that's worth discussing.

02:51.660 --> 02:57.900
In this example, we have a scoped enumeration type named item that might be items in a grocery or shopping

02:57.900 --> 02:58.440
list.

02:58.830 --> 03:04.140
The underlying value of each item might be an item code or some other value that makes sense in our

03:04.140 --> 03:05.040
application.

03:05.880 --> 03:11.070
You'll remember that with UN scoped enumerations, if we wanted to use their enumerator values, we

03:11.100 --> 03:15.690
simply stated the name of the enumerator and the compiler would implicitly convert its value to its

03:15.690 --> 03:16.710
underlying type.

03:17.320 --> 03:18.790
With scoped enumerations.

03:18.790 --> 03:20.020
That's not possible.

03:20.560 --> 03:26.050
In fact, if we try to do so, even with specifying the numerator scope, the compiler will generate

03:26.050 --> 03:26.650
an error.

03:28.140 --> 03:33.420
This is because scoped enumeration type variables are not implicitly convertible.

03:33.750 --> 03:38.190
Instead, we must explicitly cast a variable to its underlying type.

03:39.060 --> 03:44.070
Here you can see that we can cast the numerator to the integer underlying type using a few different

03:44.070 --> 03:45.360
styles of casting.

03:46.020 --> 03:49.860
Only then can we use the value of a scoped enumeration type variable.

03:51.040 --> 03:55.870
Now that we've seen what stoked enumerations are and how to use them, let's head on over to the ID

03:55.870 --> 03:57.160
and see a few examples.

04:00.050 --> 04:07.640
Okay, so I'm in the I.D., I'm in the Enumerations workspace, and in these Scoped Genomes project,

04:08.090 --> 04:12.890
I'm going to close this workspace for you just to give myself a little bit more room here.

04:13.040 --> 04:13.520
All right.

04:13.520 --> 04:19.700
So what we've got here is just to test examples that show you different ways to use scoped enumerations.

04:19.700 --> 04:24.260
So I've got them both set up and I've already built and run the program.

04:24.260 --> 04:25.630
You can see it over here on the right.

04:25.640 --> 04:30.470
And what I want to do is go over those examples so you can see exactly what's happening.

04:30.710 --> 04:37.430
This first test is very, very similar to the same first test that we did in the UN Scoped Enumerations

04:37.430 --> 04:38.150
project.

04:38.300 --> 04:42.080
Here we've got our grocery item enumeration.

04:42.080 --> 04:47.420
Now notice that this is now a scoped enumeration because we're using enum class.

04:47.870 --> 04:50.750
I've got milk, bread, apple and orange just like before.

04:51.500 --> 04:57.530
The difference is I've assigned some initialized values to these enumerators and this could represent

04:57.530 --> 05:03.170
the item code or really just about anything you can think of that could identify these the values for

05:03.170 --> 05:04.160
these enumerators.

05:04.430 --> 05:10.190
So in this case, we are explicitly defining those values and the compiler will not generate zero one,

05:10.190 --> 05:11.030
two and three.

05:11.450 --> 05:14.960
We're going to do exactly what we did before with maybe a little bit of a change.

05:15.140 --> 05:15.440
Okay.

05:15.440 --> 05:17.570
So look at some of the examples we've written here.

05:17.570 --> 05:22.160
Here we're overloading the insertion operator again, the stream insertion operator just like we did

05:22.160 --> 05:22.790
before.

05:23.210 --> 05:29.300
The only real difference is that is that now, in order to use those enumerators, we must scope them.

05:29.300 --> 05:35.510
We have to use the enumeration class name grocery item right before the enumerator value.

05:35.570 --> 05:37.850
Otherwise it's not going to compile.

05:37.850 --> 05:41.360
So that's one of the benefits of using scoped enumerators.

05:41.630 --> 05:46.700
The other thing we're going to do is in this case, I'm grabbing the underlying type of that grocery

05:46.700 --> 05:48.050
item value right here.

05:48.200 --> 05:50.060
So all I'm doing is displaying that.

05:50.060 --> 05:56.120
So when we display these values, we're going to display you can see up here Apple 132, milk, 350

05:56.120 --> 05:57.080
and so forth.

05:57.080 --> 06:00.530
What we're going to do is I'm going to switch off the grocery item passed into me.

06:00.950 --> 06:06.770
I'm going to put whatever string is appropriate on the output stream, and then I'm just going to display

06:06.770 --> 06:09.440
the value right after that colon.

06:09.650 --> 06:15.110
And the value again is one of these guys, Those are the ones I'm grabbing from the underlying type.

06:15.320 --> 06:21.560
I've got the Boolean function again exactly like it was in the previous example with scoped, except

06:21.560 --> 06:26.300
since it's a scoped enumeration, we need to qualify those enumerators.

06:26.300 --> 06:32.390
So in this case, whatever grocery item is passed into this function, if it's one of these four, then

06:32.390 --> 06:33.230
we know it's valid.

06:33.230 --> 06:35.990
Otherwise we'll return false because it's invalid.

06:36.170 --> 06:40.220
And then the display grocery list function that I wrote is exactly the same.

06:40.220 --> 06:45.620
Again, the whole point of this was to create an scoped version and a scoped version so you could see

06:45.620 --> 06:46.250
the difference.

06:46.250 --> 06:51.950
So in this case we've got that stupid vector of grocery items just like we did before, and we're going

06:51.950 --> 06:57.590
to loop through that using the range base for loop right here on line 64 and just display them.

06:57.590 --> 06:58.730
So that's pretty simple.

06:58.730 --> 07:00.890
We'll keep track of what's valid and invalid.

07:00.890 --> 07:04.790
I went over this in more detail in the scoped video so you can check it out there.

07:04.820 --> 07:10.010
And then what we'll do is we will create some items and add them to the shopping list, right?

07:10.010 --> 07:11.870
So that's what test one is doing.

07:11.870 --> 07:14.030
And you could see what I'm doing right here.

07:14.030 --> 07:16.430
And let me grab my pen right here.

07:16.430 --> 07:19.310
We're simply displaying test one and that's done right up here.

07:19.310 --> 07:20.270
There's the output.

07:20.510 --> 07:26.360
I'm creating my shopping list and I'm adding not Apple, I'm adding grocery item Apple.

07:26.360 --> 07:27.500
We've got to scope it.

07:27.500 --> 07:33.860
So I'm adding apple milk and orange and I'm creating a helicopter integer with 1000 and I want to push

07:33.860 --> 07:35.150
that guy back in.

07:35.330 --> 07:37.970
Now, I can do that here because I'm casting.

07:37.970 --> 07:40.310
So remember, be very careful with casting.

07:40.310 --> 07:42.080
Make sure your cast makes sense.

07:42.080 --> 07:46.730
In this case, it doesn't make sense really, because I don't have a white item with a 1000 code.

07:46.850 --> 07:52.250
Notice that if I try to add helicopter here, I'll get a compiler error because this is an int and it's

07:52.250 --> 07:53.960
doing a little bit of checking for me.

07:53.960 --> 07:59.510
The shopping list is expecting a grocery item, not an int here.

07:59.510 --> 08:04.610
I'm telling you, Hey, I know what I'm doing, so do what I tell you to do.

08:04.610 --> 08:06.380
And that's not always a good thing.

08:07.070 --> 08:10.130
I'm doing the 350 item, which is the milk.

08:10.130 --> 08:11.630
So it's going to add that again.

08:11.900 --> 08:15.230
And when I'm done, I display the list and here's the list that displays.

08:15.230 --> 08:20.150
I get Apple, I get milk, I get orange, I get that invalid item, which is this one right here.

08:21.080 --> 08:29.420
On my 93, I get milk again because I'm adding the item code 350 and we've got five total items, four

08:29.420 --> 08:30.980
valid, one invalid.

08:31.220 --> 08:32.000
So there you go.

08:32.000 --> 08:36.110
That's very, very similar to the example that I did in the scoped video.

08:36.320 --> 08:39.100
So now let's check this example.

08:39.110 --> 08:45.470
Test two for test two, I created a class just to show you how we can use these scoped enumerators or

08:45.470 --> 08:47.870
really scoped enumerators inside a class.

08:48.050 --> 08:49.790
So here's an example.

08:49.790 --> 08:55.580
I've got a class called Player, and this would model a player in a video game or something like that

08:55.580 --> 09:01.370
where they've got a mode which is an attack, a defense or an idle right, their current mode in the

09:01.370 --> 09:05.300
game direction that they're facing north, south, east or west.

09:05.480 --> 09:06.680
And they've got a name.

09:06.680 --> 09:11.030
So you could see those attributes of the class right here down at the bottom, right here with lines

09:11.030 --> 09:12.860
129 to 131.

09:12.860 --> 09:17.630
So again, you can see that the player has a name, it has a mode of attack or a defense, whatever

09:17.630 --> 09:21.560
their their current mode is and the direction that they're facing in the game.

09:21.560 --> 09:23.240
So those are the attributes.

09:23.360 --> 09:28.550
And if I scroll back up, we've got a constructor here just like we've done before, nothing new.

09:28.730 --> 09:33.350
We've got our getters and our setters for the name, the mode and the direction.

09:33.350 --> 09:36.440
So let's write a couple of utility functions.

09:36.440 --> 09:43.640
The first one gets me the player mode, so if I pass in not a player, but if I pass in a player mode.

09:44.460 --> 09:51.960
It's going to return attack defense or idol as a string that be a really handy function that I can call

09:51.960 --> 09:54.660
whenever I need to display that, for example.

09:55.020 --> 09:58.960
I also have a function that's going to give me the player direction.

09:59.010 --> 10:00.630
It works exactly the same way.

10:00.660 --> 10:04.410
It expects a player's direction, not a player, just the player's direction.

10:04.410 --> 10:10.680
And it returns the string here and it's going to return north, south, east or west, depending on

10:10.680 --> 10:11.840
that enumeration.

10:11.850 --> 10:14.700
Since it's a scoped enumeration, I need to qualify it.

10:14.700 --> 10:19.590
And then finally, I've overloaded the stream insertion operator, and this is where those functions

10:19.590 --> 10:21.000
that I just wrote will be called.

10:21.000 --> 10:26.970
So drain insertion Operator If we're passing in a player object by reference, in this case by const

10:26.970 --> 10:33.060
references as we're supposed to, this is simply going to display player name and then it's going to

10:33.060 --> 10:37.410
get the player's name, then player mode and it's going to get the player mode.

10:37.410 --> 10:41.940
That function we wrote and it's going to pass in the player's mode rather than the entire player.

10:41.940 --> 10:47.640
We don't need to pass in the entire player to display the mode and we're going to display player direction

10:47.640 --> 10:51.120
followed by get player direction and P direction.

10:51.810 --> 10:55.890
We'll put an end line at the end and we'll return OS and now we'll be able to use that.

10:55.890 --> 10:58.110
So in test two, you can see the test.

10:58.110 --> 10:59.370
It's really, really simple.

10:59.370 --> 11:05.160
Here I'm creating three player objects right here on lines 190 to 192.

11:05.760 --> 11:14.220
The first one is P one, its cloud strife, its current player mode is attack and its current direction

11:14.220 --> 11:15.420
is facing north.

11:15.930 --> 11:19.680
And you can see how we're using those enumerators right here.

11:20.070 --> 11:23.370
Also, you can see that the way the scope works, right?

11:23.430 --> 11:29.070
It's not just mode attack, it's player mode attack because that enumeration is defined in the player

11:29.070 --> 11:29.700
class.

11:29.700 --> 11:33.210
So it's defined publicly within the scope of the player class.

11:33.210 --> 11:38.850
So we need to create so we need to provide all the information that the compiler needs to do this.

11:38.850 --> 11:42.780
But look at the readability again, that's very readable, right?

11:42.780 --> 11:43.320
Player one.

11:43.320 --> 11:47.460
Player two Is Tifa Lockhart in defense mode facing West.

11:47.460 --> 11:53.160
This is so much easier than having magic numbers again in there and the compiler is helping us out.

11:53.160 --> 11:54.540
It's checking for errors.

11:54.630 --> 12:00.600
So once I defined those three player objects, I can display them really simply by just putting those

12:00.600 --> 12:04.410
player objects right on the output stream here with the insertion operator.

12:04.410 --> 12:07.110
And this is what we're going to get as the output right there.

12:07.410 --> 12:11.820
Play your name Cloud strife, Attack mode north, just like we did here.

12:12.330 --> 12:18.480
Tifa Lockhart, Defense West and Safarov Idle South.

12:18.480 --> 12:20.370
And you can see that display right there.

12:20.880 --> 12:24.210
Now, I didn't implement Test three, which is the rocket launch example.

12:24.210 --> 12:26.040
I'll leave that to you as an exercise.

12:26.040 --> 12:30.870
That way you can translate it from an scoped to a scoped enumeration and play around with that and have

12:30.870 --> 12:31.500
some fun.

12:31.620 --> 12:33.810
So that covers enumerations.

12:33.810 --> 12:37.650
As you can see at their core, they're very, very simple.

12:37.650 --> 12:43.200
Using them involves a lot because we can use a lot of advanced features in C++.

12:43.200 --> 12:46.200
We can use them with all kinds of control structures.

12:46.200 --> 12:52.170
We can use them inside classes, we can overload operators, we can get underlying types, we can do

12:52.170 --> 12:53.880
all kinds of really cool stuff.

12:53.880 --> 12:56.460
The big benefits, readability.

12:56.820 --> 13:00.240
Also let the compiler help you find mistakes.
