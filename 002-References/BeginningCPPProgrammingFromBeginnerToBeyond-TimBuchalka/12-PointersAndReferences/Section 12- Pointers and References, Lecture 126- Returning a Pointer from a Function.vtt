WEBVTT

00:00:05.320 --> 00:00:08.230
In this video, we'll learn how to
return a pointer from a function.

00:00:08.960 --> 00:00:13.520
In c++, functions can return pointers,
which is a super powerful feature.

00:00:14.049 --> 00:00:17.049
In order to do this, we need to
provide the type of the pointer

00:00:17.400 --> 00:00:19.970
in the function definition
and in the function prototype.

00:00:20.620 --> 00:00:23.459
All this means is that the
function will return an address

00:00:23.660 --> 00:00:26.889
of whatever type we specified
in the function declaration.

00:00:28.670 --> 00:00:29.920
Let's see an example.

00:00:30.119 --> 00:00:32.790
In this function, we're returning
a pointer to an integer.

00:00:33.480 --> 00:00:36.379
In this case, it'll be the
value of the parameter that

00:00:36.380 --> 00:00:38.040
points to the largest integer.

00:00:38.990 --> 00:00:42.490
It's okay to return a pointer to data
that's being passed into a function

00:00:42.650 --> 00:00:44.360
since we know that data exists.

00:00:44.590 --> 00:00:48.180
So in this case, we compare the two
integers that the two pointers are

00:00:48.180 --> 00:00:52.490
pointing to and return the pointer
that points to the largest integer.

00:00:53.260 --> 00:00:56.030
Notice that we're not comparing
the pointers themselves.

00:00:56.160 --> 00:00:59.060
We're comparing what they're
pointing to by de-referencing them.

00:00:59.790 --> 00:01:02.090
Pretty straightforward, but
how do you call this function?

00:01:02.090 --> 00:01:03.280
I'll show you in the next slide.

00:01:05.210 --> 00:01:07.670
Here we have a simple main
that calls the largest int

00:01:07.690 --> 00:01:08.900
function that we just wrote.

00:01:09.830 --> 00:01:13.460
I have two integers a and b,
b is the largest with 200.

00:01:14.250 --> 00:01:18.030
I call largest int and pass
in the addresses of a and b.

00:01:18.130 --> 00:01:21.150
This is correct since it
expects pointers to integers.

00:01:21.940 --> 00:01:25.130
The function returns a pointer,
which I assign to a variable named

00:01:25.130 --> 00:01:28.120
largest pointer which is declared
as a pointer to an integer.

00:01:28.690 --> 00:01:33.640
So now that variable, largest
pointer, points to either a or to b

00:01:33.730 --> 00:01:35.509
depending on which one was largest.

00:01:36.040 --> 00:01:37.250
In this case, it's b.

00:01:37.360 --> 00:01:39.830
So we de-reference the
pointer, and it displays 200.

00:01:41.280 --> 00:01:45.240
Let's see an example where we allocate
memory dynamically inside a function

00:01:45.460 --> 00:01:47.479
and return the address of that memory.

00:01:49.609 --> 00:01:53.280
Returning dynamically allocated
memory from a function is a very

00:01:53.280 --> 00:01:55.839
common use case for returning
a pointer from a function.

00:01:56.170 --> 00:02:00.440
In this example, we created a function
called create array, and it expects

00:02:00.440 --> 00:02:04.649
an unsigned integer that contains
the size of the array to create and

00:02:04.719 --> 00:02:08.140
a default parameter called init value
and that's the value we're going to

00:02:08.530 --> 00:02:10.000
initialize all the array elements to.

00:02:10.960 --> 00:02:13.170
The function returns a
pointer to an integer.

00:02:13.380 --> 00:02:16.049
Now this represents the
address of that first integer

00:02:16.050 --> 00:02:17.539
that we dynamically created.

00:02:18.009 --> 00:02:19.720
You can see the code
is pretty standard.

00:02:20.030 --> 00:02:22.770
After we create the storage, we
use a for loop

00:02:22.770 --> 00:02:25.300
and initialize all the array elements to init value.

00:02:26.109 --> 00:02:29.670
Notice that I'm using pointer offset
notation within the loop, but I could

00:02:29.670 --> 00:02:31.540
have used pointer subscript notation.

00:02:32.299 --> 00:02:36.010
Finally, we return new storage
which is the address of that first

00:02:36.010 --> 00:02:38.210
integer in the newly created array.

00:02:38.210 --> 00:02:41.159
So how do we use this function? I'll show you in the next slide.

00:02:41.159 --> 00:02:47.049
In this sample code we, call
create array and we pass in 100 and 20.

00:02:48.020 --> 00:02:51.910
That means I want 100 integers
allocated dynamically on

00:02:51.910 --> 00:02:54.799
the heap and I want to
initialize all of them to 20.

00:02:55.509 --> 00:02:59.450
So this function allocates the space
dynamically on the heap for those 100

00:02:59.590 --> 00:03:04.080
integers, initializes them all to 20
and returns the address of that first

00:03:04.100 --> 00:03:06.810
integer, which I assigned to my array.

00:03:07.640 --> 00:03:09.859
Now I can use my
array, however, I like.

00:03:10.340 --> 00:03:14.060
But remember, since the storage is
on the heap, you need to release it.

00:03:14.280 --> 00:03:17.160
So you have to remember to use
delete with the square brackets

00:03:17.170 --> 00:03:18.420
on that pointer variable.

00:03:19.510 --> 00:03:22.750
Now let's see what not to do when
returning pointers from a function.

00:03:24.760 --> 00:03:26.100
Here I have two functions.

00:03:26.420 --> 00:03:29.259
The first function is called
don't do this and the second

00:03:29.259 --> 00:03:30.739
function is called or this.

00:03:30.809 --> 00:03:32.669
They both return pointers to integers.

00:03:33.589 --> 00:03:35.979
The first function returns
the address of size.

00:03:36.199 --> 00:03:37.280
This is a real problem.

00:03:37.480 --> 00:03:40.010
Size is a local variable
to the function.

00:03:40.810 --> 00:03:44.090
This will compile just fine
since the address of size is

00:03:44.099 --> 00:03:46.720
the address of an integer and
that's what the function returns.

00:03:47.290 --> 00:03:48.460
But what's the problem?

00:03:48.719 --> 00:03:50.280
Well, you can see it's a huge problem.

00:03:50.500 --> 00:03:53.609
We're returning the address of a
local variable in the function.

00:03:54.459 --> 00:03:57.560
The variable's on the stack and the
function just terminated, so this

00:03:57.560 --> 00:03:59.490
variable is now past its lifetime.

00:04:00.300 --> 00:04:03.950
The next time the function is called
or any function is called, the stack

00:04:03.950 --> 00:04:07.049
area will be reused and the pointer
will now be pointing into that

00:04:07.049 --> 00:04:08.850
new functions activation record.

00:04:09.710 --> 00:04:12.489
If you overwrite the data it's
pointing to, you could trash the

00:04:12.490 --> 00:04:16.040
stack pointers, static links, all
kinds of important information

00:04:16.040 --> 00:04:17.170
on the activation record.

00:04:17.880 --> 00:04:20.829
Hopefully, the program crashes
or you get a really strange

00:04:20.880 --> 00:04:21.960
error that you can fix.

00:04:22.410 --> 00:04:25.489
But if the program changes data
that isn't currently being used,

00:04:25.809 --> 00:04:28.310
then the program may appear
to work correctly for a while.

00:04:28.420 --> 00:04:31.750
These types of errors or bugs
are very difficult to find.

00:04:32.550 --> 00:04:35.219
The second function has the
same problem except that

00:04:35.220 --> 00:04:38.160
it's assigned a pointer to
size variable and returns it.

00:04:38.330 --> 00:04:41.229
In both cases, the address
that's being returned is a

00:04:41.230 --> 00:04:44.780
stack variable or a function
local variable, very bad idea.

00:04:45.759 --> 00:04:47.250
Okay, that completes this video.

00:04:47.359 --> 00:04:50.030
You'll get a chance to work with
functions that return pointers

00:04:50.030 --> 00:04:53.040
to dynamically allocated storage
in the challenge exercise

00:04:53.040 --> 00:04:54.260
at the end of this section.

00:04:54.340 --> 00:04:57.230
But first, let's head over to
the IDE, and we'll go over some

00:04:57.230 --> 00:04:59.099
of these functions in live code.

00:05:00.929 --> 00:05:01.979
Okay, so I'm in the IDE.

00:05:01.979 --> 00:05:05.969
I'm in the section 12 workspace
in the ReturnPointer project.

00:05:06.480 --> 00:05:09.640
And I'd like to walk through this
example when we created that create

00:05:09.680 --> 00:05:14.110
array function, that dynamically
allocates some storage on the heap.

00:05:14.349 --> 00:05:15.930
So let's walk through this example.

00:05:16.450 --> 00:05:17.780
Right here, we're in main.

00:05:17.780 --> 00:05:20.630
And you'll notice that main
is activated when the program

00:05:20.630 --> 00:05:23.699
begins, and we've got three
local variables in main.

00:05:23.699 --> 00:05:28.740
We've got my array, which
currently is just nulled out.

00:05:29.670 --> 00:05:33.840
We have size, which
contains garbage right now.

00:05:33.840 --> 00:05:39.430
And we have init value, which
is zeroed out at the moment.

00:05:40.940 --> 00:05:42.240
Okay, so what do we do?

00:05:42.270 --> 00:05:44.900
We ask the user how many integers
would you like to allocate,

00:05:44.900 --> 00:05:46.180
and we read that into size.

00:05:46.200 --> 00:05:48.289
Let's say that they want
to allocate 10 integers.

00:05:49.010 --> 00:05:50.280
So we'll put a 10 in here.

00:05:50.900 --> 00:05:53.630
And then what value would would
you like to initialize to?

00:05:53.740 --> 00:05:57.489
How about we initialize them
all to number to the two.

00:05:58.680 --> 00:06:00.220
So now we've got those variables.

00:06:00.510 --> 00:06:04.650
And what we do now is we call
create array and we pass in

00:06:04.650 --> 00:06:07.000
the size and the initial value.

00:06:07.570 --> 00:06:09.909
So we're here now, here's
the function create array.

00:06:10.110 --> 00:06:16.110
Notice create array has one, two,
three local variables, right.

00:06:16.150 --> 00:06:21.020
It's got size, and let me
call create array here.

00:06:22.630 --> 00:06:26.386
So I'm calling create array
with the size, which is 10 and

00:06:26.386 --> 00:06:27.920
the initial value which is 2.

00:06:27.920 --> 00:06:30.700
If i didn't supply an initial
value, it would use 0.

00:06:30.700 --> 00:06:32.480
There's the default initializer here.

00:06:32.950 --> 00:06:36.870
But in this case, size
is 10 initial value.

00:06:37.420 --> 00:06:39.850
And notice again, I'm using
the same variable names.

00:06:39.850 --> 00:06:42.180
I'm doing that on purpose
don't let that confuse you, 2.

00:06:43.970 --> 00:06:49.740
And then we've got new storage right
here which is a pointer to an integer.

00:06:50.480 --> 00:06:53.250
That's where we're going to allocate
the memory from when we call

00:06:53.250 --> 00:06:54.549
new right here on the next line.

00:06:55.190 --> 00:06:56.140
And right now that's null.

00:06:57.360 --> 00:07:00.960
Okay, so now new storage
equals new int size.

00:07:00.970 --> 00:07:03.200
How many integers do I want
to allocate dynamically?

00:07:03.320 --> 00:07:04.919
However, many integers were passed in?

00:07:04.920 --> 00:07:05.960
In this case, 10.

00:07:06.590 --> 00:07:09.459
So 10 integers will be
allocated dynamically on

00:07:09.460 --> 00:07:11.040
the heap, not on the stack.

00:07:11.040 --> 00:07:11.819
This is the stack.

00:07:11.820 --> 00:07:13.400
The heap is a different
part of memory.

00:07:13.870 --> 00:07:17.219
It's way up here, let's say,
and we're going to allocate 10

00:07:17.219 --> 00:07:21.750
integers, 0 through 9, on the heap.

00:07:21.770 --> 00:07:23.680
Let's say that this is address 5000.

00:07:24.330 --> 00:07:26.880
That's the address of that
very first integer right here.

00:07:27.960 --> 00:07:31.440
What's being returned and
assigned to new storage is

00:07:31.460 --> 00:07:32.990
that first integers address.

00:07:32.990 --> 00:07:34.890
So we're putting a 5000 in here.

00:07:35.240 --> 00:07:36.360
There's our pointer.

00:07:36.900 --> 00:07:38.070
Now this is real important.

00:07:38.080 --> 00:07:40.120
We've got a pointer on the stack.

00:07:40.150 --> 00:07:41.990
That's pointing to
storage on the heap.

00:07:42.250 --> 00:07:43.760
This is exactly what we want.

00:07:44.130 --> 00:07:46.120
We've got to be careful,
not to lose that pointer.

00:07:46.120 --> 00:07:48.720
If we lose that pointer,
we've got a memory leak.

00:07:49.380 --> 00:07:50.460
Okay, great.

00:07:50.710 --> 00:07:53.740
So now we have that memory allocated,
and we want to initialize it.

00:07:53.740 --> 00:07:56.920
Remember right now that all that
is garbage data right in here.

00:07:57.590 --> 00:07:58.290
So what do we do?

00:07:58.320 --> 00:07:59.780
We just use a simple for loop.

00:07:59.780 --> 00:08:01.750
We're going from 0
less than size by 1.

00:08:02.800 --> 00:08:06.710
And we're initializing every element
in this array to whatever was being

00:08:06.710 --> 00:08:08.510
passed in an initial value right here.

00:08:08.510 --> 00:08:09.740
In this case, we passed in a 2.

00:08:10.620 --> 00:08:12.180
So we're going to store 2 everywhere.

00:08:12.510 --> 00:08:15.630
And here, I'm using
pointer offset notation.

00:08:15.670 --> 00:08:19.620
I could have just said new storage
sub-I and use pointer array

00:08:19.620 --> 00:08:22.650
notation or pointer subscript
notation, either one is fine.

00:08:23.139 --> 00:08:27.190
So in this case, we're putting
a 2 in all of these guys.

00:08:27.490 --> 00:08:30.320
All 10 of them will have 2s in them.

00:08:31.270 --> 00:08:33.090
And now, this is the piece
that's really important.

00:08:33.099 --> 00:08:34.679
We return new storage.

00:08:34.760 --> 00:08:35.860
But what's new storage?

00:08:35.880 --> 00:08:36.829
It's 5000.

00:08:36.990 --> 00:08:40.750
We return that value 5000
and notice in main, we're

00:08:40.750 --> 00:08:42.320
assigning it to my array.

00:08:44.720 --> 00:08:46.320
So we're putting a 5000 in here.

00:08:46.510 --> 00:08:50.370
So now this pointer is
pointing to the same place.

00:08:50.380 --> 00:08:54.260
That's really important because
this function is almost done.

00:08:54.480 --> 00:08:57.430
So when this function gets popped
off the stack, we're going to

00:08:57.430 --> 00:08:59.769
lose this pointer, right here.

00:09:00.539 --> 00:09:02.830
And we don't want to lose
that pointer, so that's why

00:09:02.830 --> 00:09:04.040
we assign it to my array.

00:09:04.040 --> 00:09:06.540
So now we've got a copy of
that pointer that we can use.

00:09:06.950 --> 00:09:07.940
Okay, good.

00:09:07.960 --> 00:09:10.500
So at this point, the
function is now done.

00:09:11.059 --> 00:09:13.479
We start cleaning it up.

00:09:13.940 --> 00:09:16.599
So all this is gone now, right.

00:09:16.609 --> 00:09:18.300
So this pointer here is now gone.

00:09:18.730 --> 00:09:19.910
We lose all this.

00:09:21.170 --> 00:09:22.280
And we're back to main.

00:09:23.390 --> 00:09:25.570
Now notice main has that pointer.

00:09:25.570 --> 00:09:27.500
So we didn't lose our
memory out on the heap.

00:09:27.719 --> 00:09:29.360
That's really important to understand.

00:09:30.290 --> 00:09:32.580
Okay, so now, let's display the data.

00:09:32.900 --> 00:09:40.180
So I'm calling this function right
now, display, and I'm passing in, in

00:09:40.180 --> 00:09:43.150
this case, my array, my array is 5000.

00:09:45.240 --> 00:09:47.989
That's the value of that pointer
and the size, which was 10.

00:09:49.559 --> 00:09:54.890
Okay, So display now gets activated
on the stack, and it's got 1, right

00:09:54.890 --> 00:09:58.270
here, variable, 1 local variable
another local variable and it's

00:09:58.270 --> 00:09:59.840
got another variable right here I.

00:10:00.150 --> 00:10:01.290
Okay, I'm not going to worry about I.

00:10:01.290 --> 00:10:03.440
You know all about I, it's
just a looping variable.

00:10:03.660 --> 00:10:09.030
So it's going to have this variable
array and it's going to have a size.

00:10:09.690 --> 00:10:14.910
Okay, so 5000 gets copied to
array, 10 gets copied to size.

00:10:15.180 --> 00:10:20.260
Notice that this is now pointing to
that same place, but it's constant.

00:10:20.280 --> 00:10:23.060
We've got a constant pointer, and
we're pointing to a constant array.

00:10:23.060 --> 00:10:26.770
So we can't mess with that array
either by accident or intentionally.

00:10:27.849 --> 00:10:30.819
And all we're doing is we're just
looping through there and displaying

00:10:30.820 --> 00:10:32.089
out every element in the array.

00:10:32.250 --> 00:10:37.580
Notice that in this case I'm using
pointer subscript notation here.

00:10:37.580 --> 00:10:41.499
Whereas, over here, I use pointer
offset notation, same exact thing.

00:10:42.250 --> 00:10:44.699
So this function now goes
through there, displays

00:10:44.730 --> 00:10:47.120
all those 2s 10 of them.

00:10:47.490 --> 00:10:52.160
When we're done, same as before,
we basically start unwinding.

00:10:52.160 --> 00:10:52.930
So this is done.

00:10:52.930 --> 00:10:56.110
After we do all the
displaying, we're gone here.

00:10:57.570 --> 00:10:59.360
This is gone, and we're back to main.

00:11:00.059 --> 00:11:02.949
Now I've got the storage
allocated on the heap.

00:11:03.480 --> 00:11:04.280
I'm done with it.

00:11:04.309 --> 00:11:07.010
I need to release it or free
it up, and that's what's

00:11:07.010 --> 00:11:08.990
happening right here at line 34.

00:11:10.930 --> 00:11:13.410
Delete square brackets and
the name of the pointer.

00:11:13.720 --> 00:11:16.829
You've got to make sure that
the value of that pointer is

00:11:16.830 --> 00:11:18.130
something that was newed.

00:11:18.460 --> 00:11:22.300
Okay, you just can't point to like a
stack reference and then delete that.

00:11:22.549 --> 00:11:25.709
So in this case, this
will now be freed up.

00:11:25.860 --> 00:11:28.060
And that memory will be
ready to be used again.

00:11:30.650 --> 00:11:33.230
So let's clear this
up and give it a run.

00:11:34.969 --> 00:11:36.209
So we'll build and run here.

00:11:36.500 --> 00:11:40.070
So let's say we want to
allocate 10 integers, and we

00:11:40.070 --> 00:11:41.680
want to set all of them to 5.

00:11:42.840 --> 00:11:45.790
There you see, we're displaying
all 10 integers, each one

00:11:45.790 --> 00:11:47.370
is set to 5, pretty easy.

00:11:47.580 --> 00:11:48.530
Let's run this again.

00:11:49.040 --> 00:11:53.189
And suppose we want to allocate a 1000
integers this time, and we want to set

00:11:53.190 --> 00:11:55.390
each one of them to, I don't know, 88.

00:11:57.170 --> 00:12:00.320
We run it, there we get a
1000 integers, all set to 98.

00:12:00.600 --> 00:12:02.990
What's important to understand
here is that it's all on the

00:12:02.990 --> 00:12:04.900
heap, which is pretty cool.

00:12:05.440 --> 00:12:07.699
Okay, so that finishes off this video.

00:12:07.870 --> 00:12:09.079
I hope this makes a lot of sense.

00:12:09.080 --> 00:12:10.640
If you have any questions,
please let me know.
