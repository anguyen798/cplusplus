WEBVTT

00:05.230 --> 00:06.010
Hello, everyone.

00:06.010 --> 00:06.970
Welcome back.

00:07.060 --> 00:12.010
In this video, I'm going to talk about Stateful Lambdas and I'm going to show you some examples in

00:12.010 --> 00:12.910
the ID.

00:13.180 --> 00:19.390
I'm in the Section 21 workspace, as you can see right here, and I'm in the Stateful Lambdas Project.

00:19.780 --> 00:23.170
So I've got ten different test functions that I'm going to show you.

00:23.170 --> 00:27.730
Each one does something just a little bit differently, and the idea is to give you a flavor for what

00:27.730 --> 00:31.270
stateful lambdas can do and different ways that they can do things.

00:31.270 --> 00:34.180
So let's go over this first test example.

00:34.180 --> 00:37.810
I've already gone ahead and built this and run it and all test cases over here running.

00:37.810 --> 00:42.670
So I'm just going to walk you right through them, including either stream vector and algorithm, which

00:42.670 --> 00:43.570
we'll use later.

00:43.780 --> 00:46.060
And let me just scroll up just a little bit here.

00:46.060 --> 00:46.390
All right.

00:46.390 --> 00:52.750
So notice right here that we have a variable called Global X and I've initialized it to 1000.

00:52.780 --> 00:59.350
That variable is global to this file, so it's accessible anywhere in this file.

00:59.350 --> 01:02.050
However, I can't capture that kind of variable.

01:02.410 --> 01:04.090
We can't capture those kinds of variables.

01:04.090 --> 01:05.500
We can't count global variables.

01:05.500 --> 01:08.110
For example, we can't capture static variables.

01:08.110 --> 01:13.450
So if you try to capture that variable in the capture list right here, I'll talk about that in a minute.

01:13.660 --> 01:18.190
The compiler is going to give you a warning about only automatic variables can be captured.

01:18.250 --> 01:20.620
And that's all about the reaching scope of the lambda.

01:20.830 --> 01:22.060
What can the lambda see?

01:22.060 --> 01:26.050
So let me clear this and let's go over this one step at a time.

01:26.140 --> 01:29.530
So remember that we've got that Global X out there and it's 1000.

01:29.620 --> 01:33.790
Now, inside this test function, I have a local variable called X, right?

01:33.790 --> 01:36.580
It's called local X and it's set to 100.

01:36.790 --> 01:43.270
Now I've got my lambda expression, which I'm assigning to this variable L and notice it's got a CAPTCHA,

01:43.270 --> 01:43.750
right?

01:43.750 --> 01:46.420
Those square brackets, that's where we put all our captures.

01:46.420 --> 01:50.320
So this makes this guy a state full lambda, not a state less lambda.

01:50.620 --> 01:53.050
In this case, we're capturing local X.

01:53.500 --> 01:55.120
That's that guy right there.

01:55.120 --> 01:57.910
Now, by default, we are capturing by value.

01:57.910 --> 01:59.620
That's the default capture mode.

01:59.620 --> 02:06.040
What that means is that this lambda is going to have a copy of local X in it.

02:07.030 --> 02:12.370
So this is called this guy local X and it is going to be a copy.

02:13.290 --> 02:14.820
Of what it captured.

02:15.240 --> 02:16.740
So it's going to have 100 it.

02:16.920 --> 02:18.740
Let me write that really large.

02:18.740 --> 02:19.710
So there's no confusion.

02:19.710 --> 02:21.540
This is a copy in this case.

02:21.540 --> 02:23.300
I'm making a copy of that integer.

02:23.310 --> 02:29.160
If this variable here were to be an object, then we're going to call a copy constructor to make a copy.

02:29.160 --> 02:31.830
So it's really important to understand that we're making a copy.

02:32.810 --> 02:36.850
Then we're just outputting the local access value in the global access value.

02:36.860 --> 02:43.730
So now when we call that lambda, what's going to happen is this code right here will execute the local

02:43.730 --> 02:48.620
x will display this local x, that's the copy and it's going to display 100.

02:48.620 --> 02:53.180
And you can see right up here my test one, it's going to display 100 and then we're going to display

02:53.180 --> 02:58.190
Global X and it's just finding that just because of normal scope rules, it's going to find global X,

02:58.190 --> 03:00.950
it's 1000 and it's going to display 1000 right here.

03:00.980 --> 03:01.760
Pretty straightforward.

03:01.760 --> 03:07.920
Now, if we try to modify local X inside the Lambda body, we're not going to be able to.

03:07.970 --> 03:12.860
So in order to do that, we need to use the mutable keyword, and I'm going to do that in the next example.

03:12.860 --> 03:16.370
So let me scroll up just a little bit and I'm going to scroll here to test two.

03:16.370 --> 03:17.750
I want to scroll up here as well.

03:17.750 --> 03:22.250
So right now we're talking about test two, which is that output right over here.

03:22.280 --> 03:22.540
Okay.

03:22.610 --> 03:24.320
So let's take a look at test two.

03:24.380 --> 03:29.360
Test two, we have a local variable X and here is our lambda.

03:29.360 --> 03:31.490
We're capturing that local variable X.

03:31.490 --> 03:33.980
So that means that this lambda has an X.

03:34.930 --> 03:38.230
And it's a copy of this X, so I'm going to put 100 in here.

03:39.270 --> 03:39.490
Okay.

03:39.570 --> 03:40.770
That's really important.

03:40.890 --> 03:46.690
Now, when we execute the body, we're notice we're changing that x, we're incrementing it by 100.

03:46.710 --> 03:51.150
It is allowed now because I'm using mutable, because I have that mutable keyword.

03:51.150 --> 03:52.620
It's allowing me to do that.

03:52.620 --> 03:59.070
So what's going to happen here is I'm going to increment the local value, not this guy, the local,

03:59.070 --> 03:59.850
the copy.

03:59.850 --> 04:01.650
I'm going to increment it by 100.

04:01.650 --> 04:05.460
So this guy now becomes 200 and I'm going to display that.

04:05.460 --> 04:12.120
So when I call the lambda, this body executes it, just incremented that to 200 and we're going to

04:12.120 --> 04:15.150
display X, which is 200 right there.

04:16.480 --> 04:20.860
Now when I leave, remember I just called that lamp to here and now I'm back and I'm going to display

04:20.860 --> 04:21.380
X.

04:21.400 --> 04:27.640
Well, the only x that this statement has access to is this X, and that X has not been changed because

04:27.640 --> 04:28.320
we copied it.

04:28.330 --> 04:30.040
Remember, this was a copy here.

04:31.290 --> 04:32.390
That was a copy.

04:32.400 --> 04:34.230
So in this case, it hasn't changed.

04:34.230 --> 04:36.600
So what's going to display is 100.

04:37.290 --> 04:40.050
Now, this is the piece that's really important to understand.

04:40.050 --> 04:45.090
And a lot of students and a lot of people in general don't understand how this works with lambdas.

04:45.090 --> 04:46.530
But it's really important to understand.

04:46.560 --> 04:47.700
Notice what happens here.

04:47.700 --> 04:49.340
I'm calling Lambda again.

04:49.350 --> 04:50.940
I'm calling that lambda elegant.

04:50.940 --> 04:53.730
So I'm going to call this lambda again.

04:54.180 --> 04:57.200
What happens is the body of the lambda executes.

04:57.210 --> 04:59.190
We do not capture again.

04:59.190 --> 05:02.760
The capture only happened here when we initialize that variable.

05:02.790 --> 05:04.980
L So we do not capture the 100.

05:04.980 --> 05:10.920
Again, that lambda expression already has that local x and it's right here and it's 200.

05:11.370 --> 05:11.700
All right.

05:11.700 --> 05:12.720
So again, we're right here.

05:12.720 --> 05:13.920
I'm calling this lambda.

05:13.920 --> 05:19.590
It's going to increment this guy now to 300 and it's going to display 300 right there.

05:20.250 --> 05:25.530
Now, when I come back here, I display X, which is this X that's local to this test to function,

05:25.530 --> 05:27.060
and it's going to display 100.

05:27.090 --> 05:29.700
Hopefully that makes sense if it doesn't make sense.

05:29.730 --> 05:31.920
Go back to the slides and look at the slides.

05:31.920 --> 05:34.080
And it's really important that you understand what's happening.

05:34.080 --> 05:36.240
Remember, that's the state for Lambda.

05:36.240 --> 05:40.890
When we have that lambda, remember that class that got created?

05:41.700 --> 05:44.330
Remember we talked about that close your class that was created.

05:44.360 --> 05:47.540
It has a constructor and it has.

05:48.310 --> 05:50.500
The function call operator.

05:50.710 --> 05:52.240
This would be the constructor.

05:53.080 --> 05:54.400
Right here.

05:54.550 --> 05:56.620
The constructor will be called.

05:57.220 --> 05:58.440
Right here.

05:58.450 --> 06:03.340
The operator function will be called right here.

06:03.340 --> 06:04.540
The operator.

06:05.650 --> 06:07.390
The function call operator will be called.

06:07.420 --> 06:09.170
That's really important to understand.

06:09.190 --> 06:13.420
The only time that we capture is when that constructor is executed.

06:13.540 --> 06:15.310
And that's only going to be executed once.

06:15.310 --> 06:17.650
Remember, we can only initialize an object once.

06:17.650 --> 06:19.460
And that's exactly what LL is.

06:19.480 --> 06:20.770
It's an object.

06:20.770 --> 06:22.360
So, again, take your time with that.

06:22.360 --> 06:25.630
Wrap your head around it, because it's really, really important to understand what's happening there.

06:25.680 --> 06:27.910
Okay, so let's take a look at test three.

06:27.910 --> 06:32.370
Now, what's happening with Test three is we're capturing by reference.

06:32.410 --> 06:34.630
So again, I've got my X right here.

06:34.630 --> 06:35.580
It's 100.

06:35.620 --> 06:39.360
Now we're capturing that X by reference and that's the syntax right there.

06:39.460 --> 06:41.890
Using that ampersand, the referencing operator.

06:41.890 --> 06:44.620
So what happens now is and it's mutable as well.

06:44.770 --> 06:50.530
What we're going to do now is that X is local and it's not really an X, right.

06:50.530 --> 06:53.440
We have a reference that's really important to understand as well.

06:53.440 --> 06:57.610
So whenever we change X, we're actually changing the actual X right here.

06:57.700 --> 06:58.780
So what do we do here?

06:58.780 --> 07:04.450
The body increments X by 100 and we display X, so let's call it what's going to happen.

07:04.450 --> 07:06.490
It's going to be it's already captured x, right?

07:06.490 --> 07:11.340
Its value is a reference to the actual we're going to increment it by 100.

07:11.350 --> 07:14.020
What we're going to do is we're going to increment not any local copy.

07:14.020 --> 07:14.790
There is none.

07:14.800 --> 07:18.820
We're going to increment this guy by 100 and we're going to display it.

07:18.940 --> 07:23.050
So that's going to display 200 here and you can see it right up there.

07:23.870 --> 07:28.730
Now when we return from the function call, we're going to display this X right here.

07:30.030 --> 07:33.060
It has been changed because we caught we captured by reference.

07:33.060 --> 07:35.920
So that's also going to display 200 OC.

07:35.940 --> 07:39.450
So that's three examples that are a little bit different from one another, but hopefully you'll see

07:39.450 --> 07:40.170
what's going on.

07:40.170 --> 07:40.530
All right.

07:40.530 --> 07:43.620
So now in this case, we're going to use default capture.

07:44.580 --> 07:48.780
By value and we're going to do it mutable just to make it more fun so we can actually change something

07:48.780 --> 07:50.670
and you can really see what's happening.

07:50.670 --> 07:57.390
So here we're in test four and we've got these three local variables to this test for function X, Y

07:57.390 --> 07:59.520
and Z 102 hundred and 300.

07:59.580 --> 08:05.880
Here's our lambda variable and we are capturing everything by value.

08:06.360 --> 08:09.000
So that's the default capture by value.

08:09.000 --> 08:12.870
So we're capturing X, Y and Z by value.

08:12.900 --> 08:19.530
What's going to happen here is I'm going to make a copy of X, I'm going to make a copy of Y and I'm

08:19.530 --> 08:21.090
going to make a copy of Z.

08:21.690 --> 08:25.200
So X is 100, so I'm going to make that copy.

08:25.620 --> 08:29.160
Y is 200 and Z is 300.

08:29.730 --> 08:31.080
But now notice something.

08:31.080 --> 08:34.380
We're not using Z in this code at all.

08:34.380 --> 08:36.360
So the compiler is not going to capture it.

08:36.390 --> 08:38.700
Why capture something that you're not going to use?

08:38.700 --> 08:40.380
So this won't happen.

08:40.410 --> 08:42.240
It's not going to waste its time doing that.

08:42.240 --> 08:47.550
So the only thing that's captured is X and Y and you're going to get a warning in the output when you

08:47.550 --> 08:53.250
build this program saying the variable Z was not captured since it's not being used some kind of unused

08:53.250 --> 08:54.090
variable warning.

08:54.090 --> 08:56.160
So again, by value, right?

08:56.160 --> 08:58.050
So again, we've made copies.

08:58.200 --> 09:00.660
Now I'm going to increment X by 100.

09:00.870 --> 09:03.030
So X is now 200.

09:03.840 --> 09:11.010
Remember this X here, not the sex here because we're capturing by value y is incremented by 100.

09:11.010 --> 09:12.900
So I'm sorry, it's 200 here.

09:13.200 --> 09:13.890
No, that's correct.

09:13.890 --> 09:14.970
Y was 200.

09:14.970 --> 09:16.410
Now Y is 300.

09:16.410 --> 09:17.220
That's correct.

09:17.700 --> 09:19.440
And now I'm going to output X and Y.

09:19.440 --> 09:21.720
Right now let's call the lambda.

09:21.750 --> 09:22.860
This will execute.

09:22.860 --> 09:23.700
It gives us this.

09:23.700 --> 09:29.130
And what we're going to display is right here, 203 hundred these values.

09:29.280 --> 09:34.410
When I come back from the function call, I'm going to display X and Y, I'm not going to display this

09:34.410 --> 09:37.770
X and this Y, not the ones in the lambda.

09:37.770 --> 09:40.350
So that's going to display the 100 and the 200.

09:40.740 --> 09:41.310
Okay.

09:41.310 --> 09:45.840
So let's do a couple more and then I'll switch over to another video because this one is probably going

09:45.840 --> 09:47.580
to get a little bit wrong in this case.

09:47.580 --> 09:50.240
We are doing default capture by reference.

09:50.250 --> 09:52.950
That means we're capturing everything by reference.

09:53.520 --> 09:56.340
Those are my three variables here X, Y and Z.

09:56.400 --> 09:58.530
I'm capturing everything by reference.

09:58.530 --> 10:02.100
So it's a single ampersand sign in the capture list.

10:02.730 --> 10:04.020
So what does that mean?

10:04.020 --> 10:09.900
That means that I've got an X, Y and Z that are references to the actuals, right?

10:09.900 --> 10:10.980
So that's what we've got.

10:10.980 --> 10:12.510
We're not making copies of these guys.

10:12.510 --> 10:13.800
We've got references.

10:14.670 --> 10:16.530
And we're going to increment each by 100.

10:16.590 --> 10:18.300
And we're going to display them.

10:18.570 --> 10:23.160
So when I call this function, what's going to happen is this guy will become 200.

10:23.730 --> 10:25.830
This guy will become 300.

10:26.130 --> 10:28.470
And Z will become 400.

10:29.160 --> 10:30.960
This function will display them.

10:30.960 --> 10:32.000
And we're in test five.

10:32.010 --> 10:36.300
So you can see right here we're displaying 203 hundred and 400.

10:36.420 --> 10:39.030
Now, when we come back from the function.

10:40.100 --> 10:43.910
We're going to display these guys while those are the same ones we just displayed.

10:43.910 --> 10:47.720
Right, because we actually change the actuals through these references.

10:47.840 --> 10:49.610
So, again, that should be pretty straightforward, I think.

10:49.820 --> 10:52.220
Hopefully everything is starting to come together a little bit.

10:52.490 --> 10:55.430
Once you get past the syntax, I think it's pretty straightforward.

10:55.820 --> 10:56.910
Let's do one more.

10:56.930 --> 10:59.570
And in this case, it's six.

11:00.230 --> 11:01.790
Let me scroll up here again a little bit.

11:02.090 --> 11:04.250
So we're in test six where we're right up here.

11:04.250 --> 11:07.850
And in test six, we've got those three variables again, X, Y and Z.

11:08.060 --> 11:12.710
And now what we're doing, we're capturing by value and we're capturing by reference.

11:12.710 --> 11:13.970
So that's the syntax here.

11:13.970 --> 11:19.880
It says Capture everything by value except y, capture y by reference.

11:20.330 --> 11:25.790
So again, capture everything by value, but capture Y by reference and it's mutable.

11:25.790 --> 11:28.690
So we can change those, the values we're capturing.

11:28.700 --> 11:33.740
So now we've got our X here, we're capturing X by value.

11:33.750 --> 11:35.270
So I'm going to copy the 100.

11:36.150 --> 11:38.310
We're capturing y by reference.

11:38.310 --> 11:40.680
So here's my why it's a reference.

11:41.310 --> 11:43.830
And my z I'm capturing by value.

11:44.460 --> 11:48.690
So my Z is going to be 300 right here, which I've copied.

11:49.170 --> 11:51.810
And then what I'm doing is I'm just going to add 100 to each one of them.

11:51.810 --> 11:53.490
So I'm going to call this LAMDA.

11:54.150 --> 11:57.150
What's going to happen is I'm going to increment X by 100.

11:57.450 --> 11:58.560
That's this guy.

11:59.310 --> 12:01.260
I'm going to increment Y by 100.

12:01.260 --> 12:02.130
That's my reference.

12:02.130 --> 12:03.980
So this guy now becomes 300.

12:04.810 --> 12:08.320
And then I'm going to increment ZE by 100, so this becomes 400.

12:08.740 --> 12:10.310
Then I'm going to display X, Y and Z.

12:10.330 --> 12:13.390
Well, that's 200, 300, 400.

12:13.390 --> 12:15.130
And that's what we see right there.

12:16.210 --> 12:20.450
When we come back from the function call, I'm willing to display X, Y and Z.

12:20.470 --> 12:23.880
Now we're going to display these guys right up here, X, Y and Z.

12:23.890 --> 12:26.800
So it's going to display 103 hundred and 300.

12:27.250 --> 12:28.780
And that's what you get right there.

12:29.140 --> 12:30.280
So I'm going to stop the video here.

12:30.280 --> 12:34.500
And then in the next video, I'll start from Test seven and we'll start right from there.

12:34.510 --> 12:35.620
I'll see you in the next video.
