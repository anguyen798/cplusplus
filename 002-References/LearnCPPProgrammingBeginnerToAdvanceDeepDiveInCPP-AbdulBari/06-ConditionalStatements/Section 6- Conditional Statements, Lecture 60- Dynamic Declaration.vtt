WEBVTT

0
00:00.120 --> 00:02.850
C++ allows a dynamic declaration of the variables.

1
00:02.860 --> 00:06.910
Let us understand what is the benefit of allowing dynamic Declaration.

2
00:06.990 --> 00:11.490
see We know how memory looks like, memory will be divided into three sections and used

3
00:11.490 --> 00:12.620
by the program.

4
00:12.720 --> 00:15.660
This is the place where the program itself resides.

5
00:15.660 --> 00:20.020
Suppose it's a main function,  the machine code will be lying here. and here

6
00:20.430 --> 00:25.290
Inside the stack the memory for the variables will be created during the execution of a program.

7
00:25.780 --> 00:27.830
Let's see I have a main function here.

8
00:27.900 --> 00:34.800
If I am declaring some variables ABC of type Integer suppose integer take 2 bytes, then 2 bytes for

9
00:34.890 --> 00:40.330
A is given inside the stack then 2 bytes for B are given and 2 bytes for C is given.

10
00:40.560 --> 00:44.610
So this total block of memory I'll just put a bar here to show that this memory belongs to 

11
00:44.610 --> 00:45.170
main function.

12
00:45.180 --> 00:50.050
So this is called as activation code of Main function since occupy total six bytes of 

13
00:50.040 --> 00:50.760
memory.

14
00:50.810 --> 00:56.820
Now suppose you have some conditional statements and inside this if you need a variable M that instead

15
00:56.820 --> 01:02.610
of declaring a variable m here itself if you declare it here that it will occupy the memory here just

16
01:02.620 --> 01:08.640
beside this one inside the stack but instead of declaring here if you go out on the inside if a statement

17
01:08.640 --> 01:13.620
that is inside this block after this if you don't need it then instead declaring there I will declare

18
01:13.620 --> 01:13.950
it here.

19
01:13.950 --> 01:19.710
So what happens once it enters into this conditional statement it will allocate the memory for M and

20
01:19.710 --> 01:27.480
once the block ends this memory is gone and suppose here again you have one more if statement

21
01:27.810 --> 01:33.030
If a statement then inside this again you need one variable that is X that is temporarily inside this

22
01:33.030 --> 01:35.520
block then again two bytes of memories.

23
01:35.520 --> 01:42.450
Same memories is located and utilized for another variable X and that X will be there in the memory

24
01:42.450 --> 01:44.990
as long as this if is executing.

25
01:45.600 --> 01:51.060
So that is the benefit the activation code of this main function will be growing and shrinking

26
01:51.120 --> 01:57.250
as you go on dynamically Declaration the variables and they go out  of the scope, once this block ends

27
01:57.250 --> 01:59.070
this M is gone from the memory.

28
01:59.070 --> 02:05.460
So this one side memory can be used again and again by different variables whereas in C language all

29
02:05.460 --> 02:10.110
the variables must be declared only in the beginning and whether you are using them toward the program

30
02:10.110 --> 02:11.280
or not it doesn't matter.

31
02:11.310 --> 02:17.970
So some of the variable may not be useful for the program but they will occupy the memory space so that was the

32
02:17.970 --> 02:23.650
drawback of C programming but in C++ you can declare whenever you require.

33
02:24.190 --> 02:29.360
now one interesting thing I will show you see sometimes we need some variable let us say k and to this

34
02:29.360 --> 02:35.280
we will assign some expression the result and we have the condition based on this k is less

35
02:35.280 --> 02:39.700
than something, let us say A  suppose we have to write down the statement like this.

36
02:39.750 --> 02:45.480
Now this k is only useful for if but I should be declare it before then assigning some result of an

37
02:45.480 --> 02:46.620
expression.

38
02:46.680 --> 02:47.940
So I have to declare it outside.

39
02:47.940 --> 02:52.320
Once I declare outside it is there through out the main function.

40
02:52.320 --> 02:56.070
I want this scope of this variable also limited to this block.

41
02:56.070 --> 02:59.560
I want this to be removed from the memory once this if ends.

42
02:59.760 --> 03:02.400
So how we can do this.

43
03:02.400 --> 03:11.700
I can write the same thing like this integer k assigned some expression then K less than A. I can declare

44
03:11.700 --> 03:14.390
the variable here also inside the block.

45
03:14.430 --> 03:20.910
This is the new future allowed in C++ that is in C++ 17 version 17.

46
03:20.910 --> 03:26.310
This is allowed even inside the conditional state when you can declare half declaration and followed

47
03:26.310 --> 03:33.050
by that you can have the condition so the life of this k vartiable  will be only limited to this block once the

48
03:33.050 --> 03:34.220
a block ends.

49
03:34.260 --> 03:40.880
This will be removed from the memory if suppose it is declared here then it will go away once the block ends.

50
03:40.890 --> 03:46.660
Now one more thing that is found very common in C++ programs is that inside the for loop if you required a

51
03:46.680 --> 03:48.750
counter then be declared the counter.

52
03:48.750 --> 03:58.290
Here it self, i less than some 10 I plus plus, we write declaration of this i here only and thus I will

53
03:58.740 --> 04:01.410
remain in the memory through out this for.

54
04:01.620 --> 04:07.350
Once you come out of the for and you tried to display this i it is undefined variable.

55
04:08.530 --> 04:14.790
So this is the common thing found.  so it is preferred to better utilize the memory so you can write

56
04:14.790 --> 04:22.740
down efficient piece of code using C++ so we can efficiently utilise the memory in C++ with the help of

57
04:22.740 --> 04:23.910
dynamic declarations.