WEBVTT

0
00:00.180 --> 00:03.770
Let us talk about parameter passing method In this video.

1
00:03.990 --> 00:08.580
We have already learn about functions how to write the functions and how to call the functions.

2
00:08.580 --> 00:15.480
We learn that parameters are taken by function as input and the functions will process and perform some

3
00:15.480 --> 00:18.330
specific task and they are return some result.

4
00:19.230 --> 00:23.170
So what are the methods  a function can take the parameter.

5
00:23.220 --> 00:25.020
So we learn about this.

6
00:25.020 --> 00:26.300
So there are three methods.

7
00:26.310 --> 00:28.520
A function can take parameters.

8
00:28.590 --> 00:31.690
These are the three methods supported in C++.

9
00:31.920 --> 00:34.300
If you know about C language they were only two methods.

10
00:34.320 --> 00:36.290
That is pass by value and pass by address.

11
00:36.540 --> 00:43.380
But in C++ there are three methods: pass by value, pass by address, pass by reference.

12
00:43.380 --> 00:44.500
So this actually

13
00:44.500 --> 00:51.130
we can also call it as call by value, call by address and call by reference also it's the same thing.

14
00:51.160 --> 00:56.990
So by taking one single example I'll explain you the differences between these three methods how they

15
00:56.990 --> 00:57.530
work.

16
00:57.930 --> 01:04.590
And once you know about these methods so you can use them based on that your requirement and whichever is suitable

17
01:04.590 --> 01:05.400
you can use that.

18
01:05.430 --> 01:10.900
So here I have done one program to demonstrate all these three parameter passing methods.

19
01:11.550 --> 01:18.240
So let us see, let us understand the code first then we look at all the parameters passing  methods

20
01:18.250 --> 01:19.350
one by one.

21
01:19.350 --> 01:25.740
See here inside the main function I have two variables X and Y they are having some values 10 and 20.

22
01:25.800 --> 01:28.440
Then I'm calling swap function here.

23
01:28.740 --> 01:32.150
So it means it will interchange the values of x and Y.

24
01:32.430 --> 01:35.390
So Y will become 10 and x become 20.

25
01:35.400 --> 01:37.740
That 20 will come here and 10 will go there.

26
01:37.860 --> 01:41.460
That is the purpose for that purpose I have written this function.

27
01:41.550 --> 01:42.650
Then after that I'm trying.

28
01:42.650 --> 01:43.880
to display X and Y.

29
01:43.880 --> 01:50.220
So what I'm expecting is 20 and 10 should be displayed because after swaping the value should be

30
01:50.220 --> 01:52.480
change. now  the function i have written let us look at that.

31
01:52.530 --> 01:56.940
this function SWAP int A int B.

32
01:57.090 --> 02:01.680
So these values will be passed this one then there is a temporary variable.

33
02:01.770 --> 02:06.000
And here is the logic for swapping the values of A and B.

34
02:06.100 --> 02:10.680
Now this parameter passing method is actually call by value.

35
02:10.680 --> 02:15.360
So once I explain that I can make you understand what does it mean by  what is call by value.

36
02:15.360 --> 02:22.080
Let us run this and see really it will swap two values or not let us look at the execution of this one.

37
02:22.200 --> 02:25.370
You know well that the memory is divided into three sections.

38
02:25.380 --> 02:30.350
One is a code section in which this machine code of this program is reciding.

39
02:30.510 --> 02:33.780
Now let us start the execution.

40
02:34.020 --> 02:37.310
The program will start from main, this is the entry part of a program.

41
02:37.320 --> 02:43.290
So the very first line says that I need two variables x and y to store some numbers.

42
02:43.290 --> 02:51.750
So inside the stack a block of memory is allocated for X having value 10 and the y having value 20 

43
02:52.310 --> 02:54.440
and this blog belongs to main function.

44
02:54.450 --> 02:56.240
We call this as activation record.

45
02:57.050 --> 03:02.520
Now next a swap function is called the moment the swap function is called, inside the parameters it

46
03:02.520 --> 03:08.640
says that it needs a b and also inside that there is a variable temp so block of memory is allocated

47
03:08.640 --> 03:16.020
for swap function and it will have variable A B and temp

48
03:18.880 --> 03:24.600
now as this function is called value of x is copied in a and the Y is copied in b.

49
03:24.780 --> 03:31.200
So ten is copied here and 20 is copied here and this is for swap function.

50
03:31.480 --> 03:33.630
Now let's see what's happening here.

51
03:33.630 --> 03:37.710
The value of a and b are interchange or temp assign a value.

52
03:37.950 --> 03:44.420
So 10 will be copied in temp then a assign b value so b value is stored in A.

53
03:44.430 --> 03:50.690
So this becomes 20 then b assigned temp so B will contain the value of temp.

54
03:50.880 --> 03:52.260
So ten is stored here.

55
03:52.290 --> 03:55.240
So yes they are swapped.

56
03:55.240 --> 04:00.270
Now this is the last line the moment the function ends you know well that once the function ends

57
04:00.350 --> 04:04.530
its activation record or the block of memory inside the stack will be deleted.

58
04:04.530 --> 04:05.960
So this will be gone.

59
04:05.970 --> 04:09.010
I will not mark it, just i will ahow it as deleted.

60
04:09.560 --> 04:10.170
OK.

61
04:10.230 --> 04:11.510
This is deleted.

62
04:11.640 --> 04:15.020
Now the control comes back to the main function.

63
04:15.060 --> 04:17.250
No it will print x and y.

64
04:17.520 --> 04:21.490
So what are the values of x and y 10 and 20.

65
04:22.020 --> 04:27.890
Oh they are not swapped this is 10 as it is and this is 20 as it is, they are not swapped.

66
04:28.140 --> 04:29.100
Yes.

67
04:29.100 --> 04:33.320
So this is call by value method in this method.

68
04:33.450 --> 04:41.610
The values of these X and Y they are copied in this one and swapping of these variables is done not

69
04:41.730 --> 04:44.290
the actual parameters.

70
04:44.340 --> 04:47.800
So that's the point here in call by value method.

71
04:47.810 --> 04:51.300
The value of the parameter is passed to a function.

72
04:51.300 --> 04:59.600
So these parameters we call them as actual parameters and these parameters we call them as formal parameters

73
05:00.050 --> 05:02.270
so just be different...

74
05:02.280 --> 05:06.860
These are also parameters, that are also parameter, so to differentiate  we say that are actual and

75
05:06.860 --> 05:11.570
that are formal so the value of actual parameter is copied in formal parameters.

76
05:11.660 --> 05:18.100
And if any changes are done inside the formal parameters will not change the actual parameters.

77
05:18.170 --> 05:23.790
So if you want the call by value mechanism to modify actual parameters it cannot do that.

78
05:23.930 --> 05:30.800
Then when you use call by value mechanism, if you want a function to just take the values and perform

79
05:30.800 --> 05:35.630
the operation and return the result then you use call by value.

80
05:35.660 --> 05:42.500
This function is  not returning anything and call the value method is not suitable for swap function

81
05:42.800 --> 05:44.020
for other purpose

82
05:44.030 --> 05:49.890
You can use call by value, so in practice we will be looking at call by value methods also. while writting

83
05:49.910 --> 05:50.930
for the programs.

84
05:50.930 --> 05:52.000
Iwill show you where

85
05:52.010 --> 05:54.260
call by value method is useful.

86
05:54.590 --> 05:57.650
So we have finished with call by value, so I repeat the points

87
05:57.650 --> 06:04.000
Once again, that if any changes are done to formal parameters that will not reflect in actual parameters

88
06:04.000 --> 06:08.380
you can see that the activision record of Main is different and activation record of swap

89
06:08.600 --> 06:18.030
is different and it is making changes in its own variable so it is not modifying means variables.

90
06:18.140 --> 06:19.580
This is call by value.