WEBVTT

0
00:00.770 --> 00:03.930
Let us see what are the problems using pointers. Pointers are

1
00:03.950 --> 00:08.590
Very dangerous when they are not used properly and due to pointers.

2
00:08.630 --> 00:15.030
Systems may crash means of our software or our program may crash due to run tym error.

3
00:15.680 --> 00:20.270
So at compile time we may not get the error but at run time we get the error, run time errors are

4
00:20.510 --> 00:22.900
very dangerous reason is, when we

5
00:22.970 --> 00:29.150
deliver our software to a client when the user is using a program, there he may face the

6
00:29.150 --> 00:35.320
problem that during run time with the program crash it gives a bad name to a programmer. getting an error

7
00:35.350 --> 00:41.480
at turn time at the user end is just like if a company is selling a car and the people are users are

8
00:41.480 --> 00:43.700
complaining about the problems in the car.

9
00:43.970 --> 00:47.930
So the car model will be failed and they have to take away that model from the market.

10
00:48.290 --> 00:50.090
So the same thing happened with the software.

11
00:50.120 --> 00:55.030
If our software is giving troubleto the user then the user will avoid using it.

12
00:55.100 --> 00:56.890
So run time errors are very dangerous.

13
00:56.900 --> 00:58.690
So we have to be careful with

14
00:58.730 --> 00:59.860
those run time errors.

15
01:00.110 --> 01:05.630
And one of the major reasons for which we get the run time errors is pointer. now let us see what could

16
01:05.630 --> 01:07.610
be the possible problems using pointers.

17
01:07.610 --> 01:09.320
What could be the type of error.

18
01:09.350 --> 01:14.000
Let us see. see the first type of problem is un initialize pointers,  that's

19
01:19.460 --> 01:22.240
un initialize pointers,  ptr

20
01:22.290 --> 01:30.220
Second one is a pointer may cause memory leak and third type of problem 

21
01:30.230 --> 01:37.170
Problem is we may have dangling pointers.

22
01:37.950 --> 01:40.070
These are the three commonly known problems.

23
01:40.080 --> 01:46.520
Mostly these problems are caused due to the negligence of a programmer carelessness of a programmer.

24
01:46.520 --> 01:49.500
Let us see the first one, un-initialize pointer.

25
01:49.580 --> 01:52.990
Only if you have declared any type of pointer ,let me take integer

26
01:53.010 --> 01:59.590
Only if I have declared a pointer Then I should not use that pointer unless I have initialize it.

27
01:59.600 --> 02:03.030
Suppose I am saying star P assigned some value.

28
02:03.030 --> 02:03.660
25,

29
02:04.080 --> 02:08.270
So this means that I want to store value 25 where ever pointer is pointing.

30
02:08.430 --> 02:12.400
But the question here is where the pointer is pointing it is not pointing anywhere.

31
02:12.430 --> 02:13.470
Just I have declared.

32
02:13.500 --> 02:15.120
Then what is the address in that one.

33
02:15.120 --> 02:21.570
So some default garbage address may be there, some random address, that may belong to a program or

34
02:21.570 --> 02:23.080
or may not belong to a problem. right

35
02:23.430 --> 02:28.710
So it is a invalid address if you have not made a pointer to point on some particular location a known

36
02:28.710 --> 02:29.610
location.

37
02:29.610 --> 02:35.310
So first of all make it point on some location then you access it then how we can do that.

38
02:35.310 --> 02:37.080
So there are three methods of doing it.

39
02:37.140 --> 02:48.220
First method if you already have some variable say X then you can say P assign &X, I'll remove

40
02:48.220 --> 02:49.930
this.

41
02:50.230 --> 02:55.350
So now the pointer is pointing to this knowm variable which is already existing already declared.

42
02:55.360 --> 02:56.960
So the pointer P is pointing there.

43
02:56.970 --> 02:58.070
This is the first method.

44
02:58.210 --> 03:02.200
So first method is pointer Is pointing to some variable which is already existing.

45
03:02.890 --> 03:06.140
Then second method of initializing a pointer is, to a pointer 

46
03:06.160 --> 03:14.110
You can assign some address using some hexadecimal codes like 5 6 3 8, some adress i have given.

47
03:14.130 --> 03:20.140
I have given but this address has to be typecast it as integer pointer. so can

48
03:20.240 --> 03:22.580
we directly assign some address like this to pointer,  yes if we are sure

49
03:22.600 --> 03:28.870
If we are sure that the address belong to the program so this type of initialization is also allowed

50
03:30.370 --> 03:32.290
if required we can use this.

51
03:32.290 --> 03:34.000
That's is not commonly used.

52
03:34.030 --> 03:42.250
This is mostly used in systems programming, then third one, to this pointer  you should dynamically allocate

53
03:42.250 --> 03:47.330
some memory and assign so and so I'm taking an Array of size 5.

54
03:47.680 --> 03:55.520
If I don't write size five just I write int then it will allocate just one integer so either to an existing

55
03:55.520 --> 04:02.650
variable,  or to the heap memory or the known address you must assign a pointer without  that you should

56
04:02.650 --> 04:10.450
not use the point after this weather you store the value or read the value it's OK after any of these things.

57
04:10.480 --> 04:13.020
If you say cout star P.

58
04:13.030 --> 04:15.970
You will not get run time error, you will get the data.

59
04:15.970 --> 04:18.270
If at that place the data is available.

60
04:21.240 --> 04:23.100
So this was the first problem.

61
04:23.100 --> 04:28.300
and in using uninitialize pointers, so some time programmers carelessly they don't initialize

62
04:28.340 --> 04:29.610
and try to use it.

63
04:29.610 --> 04:33.380
So as a programmer you don't do this mistake.

64
04:33.480 --> 04:35.340
Now the second problem is memory leak.

65
04:35.340 --> 04:40.270
This is related to a pointer as well as heap memory. heap memory,

66
04:40.280 --> 04:44.440
as I already have discussed that when you are allocating heap memory.

67
04:44.580 --> 04:50.310
Then when you don't require, you should de-allocate it. if you don't de-allocate it then we say that

68
04:50.310 --> 04:55.150
that memory is a leaked from that total set of memory.

69
04:55.200 --> 04:59.850
Then if you continue doing that you may run out of the memory.

70
04:59.850 --> 05:02.310
So let us see this once again.

71
05:02.310 --> 05:07.470
I have a point and I have declared heap memory.

72
05:07.470 --> 05:13.560
allocate it heap memory of some size and I have used this memory then after some time I don't need

73
05:13.560 --> 05:13.710
it.

74
05:13.740 --> 05:20.310
So if I simply say P assigned null, then point P will not be pointing on that memory.

75
05:20.340 --> 05:25.060
So suppose this is a array on which a pointer is assigning.

76
05:25.110 --> 05:28.320
and now we have removed this pointer from there, null means

77
05:28.350 --> 05:30.080
We have removed the pointer from there.

78
05:30.120 --> 05:35.560
We should not do this unless we have explicitly deleted the memory so First of all say delete.

79
05:35.590 --> 05:39.190
P then only, make P as null.

80
05:40.390 --> 05:46.530
Now here is one more thing I have to tell you that you write P assign null or also you can write

81
05:46.530 --> 05:55.340
P assign zero also or else you can write to P assign nullptr, see This means a zero only

82
05:55.470 --> 06:01.860
And also you can write zero, but this is a literal buildin  literal in C++, like a keyword.

83
06:01.900 --> 06:03.060
reserved word.

84
06:03.120 --> 06:04.250
This is also zero.

85
06:04.280 --> 06:06.810
But it is not a int value, it is address value.

86
06:06.810 --> 06:10.830
So in modern C++ it is suggested you use nullPTR.

87
06:10.880 --> 06:13.830
whenever you have to write null avoid using null.

88
06:14.190 --> 06:20.270
So back to this memory leak, so the conclusion is you must delete the memory when you are not using it

89
06:20.280 --> 06:22.580
before making a pointer that is null.

90
06:23.280 --> 06:26.900
Now let us move to the third problem that is dangling pointer.

91
06:27.110 --> 06:31.350
thi pointer i will show you one situation where this of problem may arise.

92
06:31.350 --> 06:40.230
See I have a main function void main,  I'm writing here and inside this I have a pointer and to this I

93
06:40.230 --> 06:48.930
have allocated heap memory, new int [5] then I have called one function to that function

94
06:48.990 --> 06:51.070
I have send a pointer P.

95
06:51.330 --> 07:01.020
Now this is function fun void function fun which is taking a pointer as a parameter, and this function

96
07:01.080 --> 07:06.420
is using the memory then after that it is saying delete Q

97
07:10.790 --> 07:20.930
now see the situation, main is having one pointer P which is pointing on some memory in heap. then this P

98
07:21.070 --> 07:21.440
is given to Q,

99
07:21.440 --> 07:24.420
Q is having a pointer in that function.

100
07:24.430 --> 07:33.700
So that is also pointing on same memory then after some time, at end off a function it is a deleting

101
07:33.700 --> 07:35.650
that memory so this memory is gone.

102
07:36.430 --> 07:44.340
So who deleted that memory function fun using pointer Q which was  shared by main function. main function

103
07:44.350 --> 07:45.770
has given this pointer to it.

104
07:46.600 --> 07:48.810
Now when the control come back here.

105
07:48.820 --> 07:54.340
inside the main function if you tried to access, access means I want to print some value assuming that

106
07:54.340 --> 08:01.540
there is some value here 7, I want to print that one, star P, now P is pointing to a location which is

107
08:01.540 --> 08:04.300
not existing the memory is dealoocated.

108
08:04.540 --> 08:11.430
So actually this will cause an error, run time error, pointer is trying to access the memory which is no

109
08:11.440 --> 08:15.140
more belonging to a program which is deallocated  now.

110
08:15.550 --> 08:21.010
So this type of problems may also cause when you are trying to access the memory which is already 

111
08:21.030 --> 08:22.380
deallocated.

112
08:22.390 --> 08:28.360
So this pointer P is now our dangling pointer that P is pointing on the location which is no more belonging

113
08:28.360 --> 08:34.720
to program. so un-initialise pointers means, the pointer is never initialize, dangling pointer

114
08:34.750 --> 08:39.810
means pointer was initialized but  just now memory is  de-allocated.

115
08:40.090 --> 08:46.360
So we should avoid these three type of problems while writing programs or developing applications.

116
08:46.360 --> 08:52.180
Actually these problems are caused due to negligence of biggner programmer,  experts

117
08:52.310 --> 08:59.160
programmers may check all these things throughly only before delivering a program or before developing a

118
08:59.350 --> 09:05.200
software.  but beginer programmer may do these type of mistakes so to make it simple for the programer

119
09:05.210 --> 09:13.080
to avoid these type of dangerous errors java and DotNet has removed pointers and those languages

120
09:13.090 --> 09:20.020
are manage languages so Jevian will take care of all these things it will trying to de-allocate

121
09:20.020 --> 09:26.320
the memory when not in use and it will not allow dangling pointers to be access so they take care

122
09:26.320 --> 09:27.300
in their own way.

123
09:27.700 --> 09:35.890
So that's why those languages have called as manage languages, and they are much simpler than C++ but C++ gives

124
09:35.890 --> 09:42.670
full control to the programmer No this is more powerful but the programmer must be careful while using

125
09:42.670 --> 09:48.200
pointers. so I will give you a demo on this one so practically I will show this.