WEBVTT

0
00:00.360 --> 00:05.280
Let us learn about principles of object oriented programming.

1
00:05.310 --> 00:12.330
These are the set of principles of object oriented programming that is abstraction encapsulation inheritance

2
00:12.420 --> 00:14.380
and polymorphism.

3
00:14.570 --> 00:20.820
As I was comparing software development or software engineering with other engineering disciplines, we

4
00:20.820 --> 00:26.380
want the software development should also be done just like other engineering right.

5
00:26.430 --> 00:31.290
So the object orientation supports a programmer to develop any application.

6
00:31.290 --> 00:37.370
Just like how other engineers develop their products like electronic engineer it is making some device

7
00:37.370 --> 00:43.710
or an automobile engineer is making some vehicle, so software engineers also want to follow their approach.

8
00:43.710 --> 00:44.910
That same approach.

9
00:44.910 --> 00:48.740
So that approach gives these four principles.

10
00:48.930 --> 00:52.150
Let us see how see how see First of all.

11
00:52.310 --> 00:56.060
when we come to software development that is programming.

12
00:56.420 --> 00:58.760
What are the main elements of programming.

13
00:58.760 --> 01:00.580
There are two elements of programming.

14
01:00.590 --> 01:01.890
What is that.

15
01:01.910 --> 01:03.350
First is data.

16
01:05.150 --> 01:09.710
And second one is operations on that data that is functions

17
01:13.460 --> 01:16.060
the functions perform operations on the data.

18
01:16.060 --> 01:19.970
There may be many functions and there may be a huge collection of data.

19
01:20.390 --> 01:26.390
So when you develop a software, software is for  performing operations on the data only so programs

20
01:26.390 --> 01:27.700
are are based on the data.

21
01:27.710 --> 01:31.820
So data is primary then the operations on the data are the set of functions on them.

22
01:32.510 --> 01:34.660
So our program contain these.

23
01:34.860 --> 01:40.370
like if you take a car, like if you take an example of auto-mobile car which will have metal

24
01:40.390 --> 01:44.000
or wires or cables and plastic or fiber.

25
01:44.000 --> 01:50.210
These are the things that are used for making an vehicle if you talk about electronic then electronics

26
01:50.210 --> 01:55.630
circuitry ICD or boards are used for making an electronic device.

27
01:55.820 --> 01:58.830
same way it what is use for making a software.

28
01:58.850 --> 02:02.580
We need data, and the functions on the data. now let us learn about

29
02:02.590 --> 02:04.910
These principles.

30
02:04.910 --> 02:08.170
First of all abstraction, abstraction.

31
02:08.180 --> 02:16.190
So if you look at a car example then all the mechanism of the car will be hidden inside some cabin

32
02:16.490 --> 02:24.020
or bonet and what is visible outside is the steering and the gear shaft and pedals for acceleration

33
02:24.020 --> 02:26.720
and all so this are visible to the user.

34
02:26.750 --> 02:30.890
Everything is hidden inside, how the car is working.

35
02:30.920 --> 02:35.190
User need not know the driver of a car need not know how it is working.

36
02:35.360 --> 02:41.660
Now same way if I take the example of a television complete circuitry is inside the box and what is

37
02:41.660 --> 02:47.690
visible outside, the buttons, touch buttons or buttons or the remote control buttons for operating

38
02:47.690 --> 02:50.470
it everything is inside.

39
02:50.600 --> 02:56.700
So what is visible outside, functions and he need not know how that television is working inside.

40
02:56.750 --> 02:59.600
So that is abstraction, when you don't know the internal details.

41
02:59.610 --> 03:01.190
That is nothing but abstraction.

42
03:01.190 --> 03:05.240
So same way in software also we want to achieve abstraction.

43
03:05.270 --> 03:07.450
We don't want to show internal detail.

44
03:07.550 --> 03:12.590
So these mechanisms in the functions we don't want to see the implementation of the function,  how they are

45
03:12.590 --> 03:18.200
working but just we want the names of the function so how it is done in object oriented programming

46
03:18.470 --> 03:19.760
using C++.

47
03:19.760 --> 03:22.260
We write these things inside one class.

48
03:22.640 --> 03:28.580
I will just write the name of the class as my. So class will contain data and the function so what is visible

49
03:28.580 --> 03:29.330
here.

50
03:29.380 --> 03:32.170
only functions. now here user.

51
03:32.210 --> 03:38.600
remember one thing, who is a user of a class, program only, not the user for software.

52
03:38.620 --> 03:42.130
We are talking about programmer only, suppose I wrote the class.

53
03:42.140 --> 03:47.390
Then the other programmer is myself only, I should bother about just calling the function.

54
03:47.390 --> 03:50.260
I should not bother about how those functions are working.

55
03:50.270 --> 03:55.430
Suppose I wrote the function today tommorow I need not look into that detail of how the function is

56
03:55.450 --> 03:56.000
working.

57
03:56.090 --> 04:02.210
I wrote it and finish, just I should enjoy using it in my programs, that's it. whether I should wrote it or

58
04:02.210 --> 04:03.280
somebody else wrote it.

59
04:04.340 --> 04:07.820
So we don't want to know the internal detail,  just the function name should be sufficient.

60
04:07.820 --> 04:12.620
That is the meaning of abstraction, and we can group the set of functions together with the help of class.

61
04:12.710 --> 04:20.000
So that's what encapsulation so this class gives two things that is abstraction also and encapsulation

62
04:20.010 --> 04:21.760
abstraction in what sense.

63
04:21.830 --> 04:23.030
Just we get  the function name.

64
04:23.030 --> 04:24.800
We don't know the workings of a function.

65
04:24.920 --> 04:29.060
Only we know it  when we are writing. when we are using we don't know how they are working.

66
04:29.070 --> 04:32.680
Like suppose printf function you have using C language, thousands of times.

67
04:32.690 --> 04:37.770
you may have use but ever wondered how it is working, how it is displaying on the screen.

68
04:37.780 --> 04:39.830
No that is abstract for you.

69
04:39.900 --> 04:46.280
So without knowing how the printf is working you have used it many times so that this abstraction

70
04:46.280 --> 04:51.170
for you. does it mean that you cannot write the function like printf by yourself.

71
04:51.170 --> 04:51.430
Yes.

72
04:51.440 --> 04:55.700
If you study you can write a function like printf by yourself.

73
04:55.700 --> 05:01.080
So same way when some programming has written a class or a piece of code for some purpose.

74
05:01.090 --> 05:04.150
Then just you should enjoy using it on the program.

75
05:04.160 --> 05:05.180
You should be.

76
05:05.180 --> 05:11.510
That is include the library and you should use the objects of the class and call the functions, that's it.

77
05:11.510 --> 05:14.690
you need not worry how they are working once you sure that these are perfect.

78
05:14.720 --> 05:16.340
Just use them.

79
05:16.520 --> 05:24.910
Next what, so class help us achieving abstraction, then next is encapsulation So what is an encapsulation.

80
05:24.920 --> 05:30.100
So that's already I told you that television box is a  packed box everything is inside.

81
05:30.140 --> 05:32.150
So what is hiding inside data.

82
05:32.150 --> 05:34.100
What is visible outside functions.

83
05:34.130 --> 05:38.890
So we have combined the data, data means what   the cables and IC's and everything whatever is there in T.V

84
05:38.890 --> 05:41.650
is data and what the buttons are visible.

85
05:41.660 --> 05:45.620
That is function or same way you  will go to a bank, bank as an object.

86
05:45.620 --> 05:50.360
If you see, then all your account details and your cash and everything inside that is hidden inside

87
05:50.390 --> 05:51.860
all your records are hidden inside.

88
05:52.120 --> 05:54.500
Just you call the function, deposit withdraw.

89
05:54.710 --> 06:00.100
You can't say that I am having one hundred crore in my account in this bank.

90
06:00.100 --> 06:04.300
I will directly enter into the locker rooms and everything take the cash by myself.

91
06:04.300 --> 06:07.280
No you can not do that you have to follow a function.

92
06:07.350 --> 06:08.260
Same way you can not know,

93
06:08.270 --> 06:13.070
No you cannot say that I am a elec. engineer I know how television works.

94
06:13.070 --> 06:15.820
I'll open the box and connect the cables and use it.

95
06:15.830 --> 06:16.670
You cannot do that.

96
06:16.670 --> 06:21.730
You should use function. to make it safe from mishandling not security.

97
06:21.740 --> 06:24.650
Most of the people say secure, it is not security.

98
06:24.680 --> 06:26.060
See I wrote my class.

99
06:26.060 --> 06:26.810
I am using it.

100
06:26.840 --> 06:28.880
So then from whom I am securing it.

101
06:28.970 --> 06:34.130
So it is just avoiding it from mishandling like how you declare constant variables, so we don't

102
06:34.130 --> 06:38.780
want to modify the value. for us only so saying way its not security.

103
06:38.780 --> 06:40.930
It's for avoiding mishandling.

104
06:41.000 --> 06:47.270
We hide the data and make the functions visible and we put  the things together at one place, encapsulation

105
06:47.300 --> 06:51.750
data and the functions together so that's it a class helps the data and the functions together.

106
06:51.750 --> 06:58.190
That is encapsulation and along with this, in classes we make data as private.

107
06:58.220 --> 06:59.630
So that's what I was telling you.

108
06:59.630 --> 07:01.070
This is not for security.

109
07:01.070 --> 07:02.130
We want to avoid

110
07:02.130 --> 07:08.510
The mishandling of the data so we make it as private and we make functions as public, so you can see

111
07:08.510 --> 07:10.880
that in television, everything is hidden inside.

112
07:10.880 --> 07:15.400
The functions are coming out, the buttons are coming out, in a car every thing is hidden inside

113
07:15.710 --> 07:18.200
only the dashboard is coming out.

114
07:18.200 --> 07:25.040
So functions are visible you can use those functions so we hide the data and show the functions and

115
07:25.040 --> 07:28.200
we also achieve data hiding along with encapsulation.

116
07:28.220 --> 07:31.130
So data hiding comes as  a part of encapsulation.

117
07:31.390 --> 07:35.530
Let us say, I have written a class for something called car.

118
07:35.750 --> 07:38.570
Actually it's the example from auto mobile.

119
07:38.580 --> 07:44.620
We don't make a class for a car, but for understanding the concept we make the class for car right.

120
07:44.650 --> 07:49.040
We may be bringing classes for a student, we need to making a class for employee or custom order

121
07:49.070 --> 07:58.370
product or passenger or  a flight or a journey or a trip or a driver, we'll be making classes or

122
07:58.370 --> 07:59.870
objects like this.

123
08:00.260 --> 08:05.360
Depending on the system for which you are developing a software but for our understanding purpose.

124
08:05.460 --> 08:12.140
we use cars and these television as an example for making understand the concept of object orientation.

125
08:12.170 --> 08:15.110
So let me stick to car, I wrote a  class for car.

126
08:15.630 --> 08:20.230
Now let's talk about inheritance and polymorphism as these two interrelated.

127
08:20.240 --> 08:24.570
So similarly inheritance and polymorphism are interrelated with the help of car 

128
08:24.560 --> 08:25.610
Example I'll explain.

129
08:25.610 --> 08:28.440
see suppose you have written a class for a car.

130
08:28.460 --> 08:31.250
Somebody has a design a car in automobile.

131
08:31.340 --> 08:34.110
Yes  here we have written  class for car.

132
08:34.190 --> 08:35.320
Then some that car.

133
08:35.350 --> 08:38.780
We have BMW so BMW is a car.

134
08:40.100 --> 08:43.700
So what is BMW What all you finding  in the car that is available here.

135
08:43.730 --> 08:45.740
So it is inheriting from car.

136
08:45.740 --> 08:48.070
So somebody maybe or a century back.

137
08:48.080 --> 08:54.010
Somebody has to design a car with four wheels and the seats and the driver seat driver everything.

138
08:54.060 --> 08:58.920
And with all the operation that is gearbox and stearing and all these things somebody has a design

139
08:58.940 --> 08:59.470
this one.

140
08:59.750 --> 09:02.400
So that design is followed by all the cars in the  world.

141
09:02.630 --> 09:06.230
So BMW is the car means it is inheriting everything from that car.

142
09:06.260 --> 09:08.640
That definition that definition.

143
09:08.660 --> 09:10.940
Then same way, toyota is also a car

144
09:14.820 --> 09:18.060
and Suzuki is also a car.

145
09:18.930 --> 09:25.660
So all of these are cars. they are inheriting  all the features of this car plus they have more extra features.

146
09:25.720 --> 09:31.110
It's not just limited here in automotive engineering we find that BMW they will have their own design

147
09:31.170 --> 09:36.770
and from that only they will launch one car and then they will launch a new version of that car and a

148
09:36.770 --> 09:37.250
new version.

149
09:37.260 --> 09:39.560
So it's nothing but inheritance.

150
09:39.930 --> 09:45.390
Like if you take a toyota, they will launch a car then from that only they will launch a new model.

151
09:45.390 --> 09:50.900
So by making some changes in this one or some advancement they will launch a new car, they will not

152
09:50.970 --> 09:57.300
redesign a car from the beginning again they will launch design a new car from an existing car only

153
09:57.590 --> 10:01.500
that is inheritance all right.

154
10:01.570 --> 10:04.660
So we want that  inheritance to be followed in programming.

155
10:04.670 --> 10:10.590
Also. suppose I have written  a class some class then tomorrow I want another class in which I want all

156
10:10.610 --> 10:15.810
these features plus extra features so I should be able to inherit, borrow all these features.

157
10:15.900 --> 10:21.200
So I understand more while doing some programming, than last one polymorphism.

158
10:21.550 --> 10:27.100
What is this? now just in one  point I can explain you this one.

159
10:27.280 --> 10:30.010
See if you have to learn driving.

160
10:30.010 --> 10:39.900
What do you learn BMW or Toyota Suzuki you will learn, if you learn suzuki then you'll think 

161
10:39.900 --> 10:40.240
toyota

162
10:40.250 --> 10:42.020
I don't know how to drive it.

163
10:42.110 --> 10:43.030
I should learn again.

164
10:43.220 --> 10:49.070
No you learn car, if you learn this you can drive this also.

165
10:49.080 --> 10:54.300
This also, this also, when you drive this you will say I'm driving car when you drive this you will

166
10:54.380 --> 10:55.310
say I'm  driving a car.

167
10:55.700 --> 10:58.590
But the way it runs is different the way it drives.

168
10:58.650 --> 11:02.840
that's polymorphism, that's polymorphism.

169
11:02.840 --> 11:06.690
So with the help of inheritance we achieve polymorphism right.

170
11:06.710 --> 11:12.650
The people who are using things need not re-learn them just they've learned something in the upward

171
11:12.670 --> 11:18.130
part of a hierarchy the upper class in  hierarchy then they can manage all this. same way.

172
11:18.130 --> 11:23.120
If you know how to use a bowser do you need to learn how to use Chrome or how to use Internet Explorer

173
11:23.150 --> 11:26.060
Mozilla Firefox or Safari? No.

174
11:26.270 --> 11:32.820
Once you know how to use one of the browser then you can access internet using any browser, that's what.

175
11:32.840 --> 11:38.090
Because things are common there when you're using opera  you would not say I'm using opera, you will say I'm

176
11:38.090 --> 11:39.280
browsing Internet.

177
11:39.280 --> 11:43.550
when you use chrome you will not say I'm using Chrome you'll say I'm browsing Internet.

178
11:43.550 --> 11:45.470
So that's what you will say I'm driving it.

179
11:45.730 --> 11:47.010
that's it.

180
11:47.090 --> 11:48.590
It's polymorphism.

181
11:48.740 --> 11:50.500
The name is same the term.

182
11:50.510 --> 11:51.500
I'm driving a car.

183
11:51.680 --> 11:53.690
But BMW I'm driving a car.

184
11:53.880 --> 11:54.580
But toyota.

185
11:54.880 --> 11:55.870
I'm driving a car.

186
11:55.930 --> 11:58.540
Suzuki the word that is use is same.

187
11:58.640 --> 12:04.940
But the work is different, that this what polymorphism is so I will show  you these things more in detail

188
12:05.210 --> 12:09.980
with the help of code. so in the Coming videos we will see what are classes and objects, what are their

189
12:09.980 --> 12:12.350
differences how to write a  class how to create objects.

190
12:12.500 --> 12:13.850
So we learn syntactically.