WEBVTT

0
00:00.630 --> 00:01.550
Let us look at.

1
00:01.590 --> 00:03.870
Static variables.

2
00:03.870 --> 00:05.310
This is a little confusing.

3
00:05.310 --> 00:08.590
So I will make it very easy for you.

4
00:08.610 --> 00:11.850
Just listen it very carefully.

5
00:11.910 --> 00:17.910
I have already covered local and global variable so based on that, with the help of that I'll explain

6
00:17.910 --> 00:20.390
you static variables.

7
00:20.820 --> 00:29.010
See here I have an example program inside this I have one global variable that is V which is having

8
00:29.010 --> 00:34.220
value 0, then function is there which is having a local variable 5.

9
00:34.370 --> 00:43.230
And it is doing C++ and displaying A and V and from main function it is calling function fun for three

10
00:43.230 --> 00:45.340
times.

11
00:45.390 --> 00:50.820
Now let us see how it works what will be the output we know well about the global variable, first i will show you the working

12
00:50.820 --> 00:54.800
then I will show you what is static variable.

13
00:55.380 --> 01:02.250
So main is not having anything just it is calling function fun main is not doing any work at all apart

14
01:02.250 --> 01:03.650
from calling this function.

15
01:03.680 --> 01:07.010
So let us see, the moment I say i want to run.

16
01:07.050 --> 01:13.500
This is loaded inside the main section so the machine code is loaded in the code section then also

17
01:13.500 --> 01:22.830
variable v is also created you know well that these global variables are created inside code section at loading

18
01:22.830 --> 01:25.440
time before the execution of a program

19
01:29.090 --> 01:34.500
now let me execute and show you, I'm using global variable again, just a minor change I'll make you understand

20
01:34.500 --> 01:37.130
static variable, just follow this carefully.

21
01:37.920 --> 01:40.710
Let us see the execution main function start.

22
01:40.740 --> 01:45.580
So there is nothing inside main function so a dummy activation record I am taking, there is no variable

23
01:45.620 --> 01:50.670
so no memory at all, then the function fun is called function fun activation record is created what

24
01:50.670 --> 01:57.780
is the variable inside this one A and what is the value in this one 5 then V++ this V becomes one

25
01:57.930 --> 02:04.610
this V becomes 1 then print A and V, A is what 5 and V is what 1.

26
02:04.620 --> 02:07.050
So instead of showing here I will show here.

27
02:07.320 --> 02:12.280
So 5 and 1, A is and 5 and V is 1 in the first called

28
02:12.300 --> 02:19.740
This is displayed, and once the function ends this activation record is deleted then it come back

29
02:19.800 --> 02:22.680
to the main function and what is the next line.

30
02:22.680 --> 02:26.270
Again the function call, again the function is called.

31
02:26.550 --> 02:29.550
So activation record is created, A is created.

32
02:29.550 --> 02:40.210
What are the value of A,  5 then V++,  v becomes two, and print A, V. A is what 5 only, and V is how much now, 2

33
02:41.510 --> 02:44.340
As it's a global Variable. now  once the function ends.

34
02:44.370 --> 02:47.230
Again the activation that code is deleted.

35
02:47.340 --> 02:55.350
Now you know when I call it again 5,3 will be printed.  now we can understand what are static Variables.

36
02:55.500 --> 03:04.410
Listen this is local variable for function fun, it is  created and destroyed whenever the function is

37
03:04.410 --> 03:05.190
called.

38
03:05.370 --> 03:11.920
This is a global variable which is remaining there through out the program inside the code section and the

39
03:11.920 --> 03:13.930
both these function can access it.

40
03:14.070 --> 03:19.960
But here in my example only function fun is accessing, main is not accessing, there is no problem.

41
03:20.070 --> 03:26.370
It's not mandatory that every function should access it. now this is a global variable who can access any

42
03:26.370 --> 03:31.920
function can access how long it will be there as long as the program is running.

43
03:32.790 --> 03:35.470
I want this variable inside this one

44
03:39.010 --> 03:50.040
int V assign Zero. if you bring that variable here, it's not global, it became local, it became

45
03:50.040 --> 03:50.430
local.

46
03:50.880 --> 03:51.800
Yes.

47
03:51.960 --> 03:55.740
No, I want a that to be just like  global.

48
03:56.070 --> 03:58.360
What does it mean by just like global.

49
03:58.380 --> 04:00.140
There are two points about global.

50
04:00.270 --> 04:05.050
It can be accessible everywhere, and it will remain always in the memory.

51
04:05.100 --> 04:06.160
Which one you want.

52
04:06.240 --> 04:09.530
I want it to remain always in the memory like this.

53
04:09.540 --> 04:12.840
I don't want it to be accessible by all the functions.

54
04:12.840 --> 04:16.380
I want it to be accessible only by this function.

55
04:16.770 --> 04:20.580
So write static here.

56
04:21.270 --> 04:25.590
Yes that's a global variable property of two property one property.

57
04:25.590 --> 04:26.110
What is that.

58
04:26.130 --> 04:29.410
It will be there through the execution time of a program.

59
04:29.700 --> 04:35.650
So yes static variables are the variables which remains always in the memory.

60
04:35.820 --> 04:37.020
Always in the memory.

61
04:37.020 --> 04:39.150
They are just like a global Variable.

62
04:39.280 --> 04:46.580
Only the difference between global and static variable is global variable can be access in any function

63
04:46.750 --> 04:52.090
static variable are accessible only inside the function in which they are declared.

64
04:52.200 --> 04:55.740
Now if I run this program now static variable how it works.

65
04:55.740 --> 05:03.850
Same way same result, first time it is called V is zero then A is created  function fun, A is created with

66
05:03.850 --> 05:11.320
the value five and it will  V Plus plus or V becomes 0 to 1 now then display what 5,1.

67
05:11.340 --> 05:13.680
and function ends.

68
05:13.680 --> 05:18.620
This is gone, but that remains as it is, in the second call.

69
05:18.630 --> 05:20.760
Again, this is not done again.

70
05:20.800 --> 05:26.940
Remember in the second call we have written it here every time it is not created it is created only one

71
05:26.940 --> 05:30.410
time that is at the loading time.

72
05:30.460 --> 05:41.220
Now next again A is created, A is created for function fun and V++ so the same V becomes 2 and print 5 and 2

73
05:41.310 --> 05:43.640
That's it.

74
05:43.650 --> 05:48.620
So the point here is when you write any static variable it is not created every time.

75
05:48.630 --> 05:50.850
Just like other local variables.

76
05:50.850 --> 05:55.130
So whenever you think of a static variable imagine that they are global.

77
05:56.010 --> 06:03.740
But their scope visibility is limited to a function that's it, that's it.

78
06:04.110 --> 06:06.920
this is the easiest way to understand static Variables.

79
06:07.470 --> 06:09.660
So let us try this even I will try and show you.