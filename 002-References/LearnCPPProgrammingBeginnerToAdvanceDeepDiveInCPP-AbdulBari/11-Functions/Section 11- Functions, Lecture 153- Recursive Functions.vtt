WEBVTT

0
00:00.290 --> 00:05.910
Now let us look at the example of recursive function, I have a recursive function here that is functions

1
00:05.910 --> 00:07.330
fun which is taking parameter n.

2
00:07.500 --> 00:12.240
and a recursive function is one which calls itself.

3
00:12.240 --> 00:14.240
So this is callin itself.

4
00:14.250 --> 00:17.680
So a function calling itself is called as recursion.

5
00:17.790 --> 00:23.430
Now this is having value n but it is calling with N minus 1 so modifying the value so that at

6
00:23.430 --> 00:26.400
one time it becomes less than or equal to zero.

7
00:26.400 --> 00:29.640
So that function can stop calling itself.

8
00:29.640 --> 00:37.500
So every recursive function must have some conditions so that it terminates after some calls, now  from the main

9
00:37.500 --> 00:41.810
function I am passing 5 to this function fun.

10
00:42.060 --> 00:48.230
Let us see what will be the output. see it is printing 5 4 3 2 1

11
00:48.960 --> 00:51.450
So let us see how it is working so for that,

12
00:51.660 --> 01:00.190
I'll put a break point here and I will run the program.

13
01:00.300 --> 01:02.020
See here in the watch the value of n

14
01:02.040 --> 01:06.960
you can see it is 5  than it has entered in 5 is greater than zero.

15
01:06.990 --> 01:10.260
Yes it will print this from now it will come inside and print.

16
01:10.260 --> 01:18.490
So if I continue execution then it will print 5 then it will call itself again, now again a new call.

17
01:18.490 --> 01:19.350
So what is the value of.

18
01:19.410 --> 01:24.440
N now that was 5 now it became 4, now it became 4.

19
01:24.810 --> 01:31.490
Yes it has became 4,  now if we continue execution then let's see what happens.

20
01:31.520 --> 01:32.590
Four is greater than zero.

21
01:32.600 --> 01:34.070
So it will print four.

22
01:34.220 --> 01:36.360
Then it will call itself again.

23
01:36.370 --> 01:42.540
And now this time the value of n will be 3 because four minus one is a three, now the new call.

24
01:42.530 --> 01:47.480
There's a new function called with the value of n as  three and three is greater than zero so it should

25
01:47.610 --> 01:52.980
print  3 and call itself again with the three minus one and that is 2.

26
01:53.030 --> 01:57.910
So let us continue execution, print 3 and call it self.

27
01:58.080 --> 02:02.530
Tw, now the value of n has became two right, two.

28
02:02.930 --> 02:06.000
So it is calling right, so now it will we two minus 1.

29
02:06.000 --> 02:12.250
So it's going to be one if I continue execution, continue print 2, and call itself  again.

30
02:12.600 --> 02:15.140
now the value of n has became one.

31
02:15.240 --> 02:15.640
Yes.

32
02:15.660 --> 02:22.130
1, it is still greater than zero, so it's going to print one then it will call itself again the one minus

33
02:22.130 --> 02:23.680
one that is zero.

34
02:23.690 --> 02:32.450
So i will continue execution it has printed one then it has call itself again with n value as zero now n is

35
02:32.450 --> 02:34.670
is zero, zero is not greater than zero.

36
02:34.880 --> 02:40.940
So zero will not be printed and it will not call itself again because this is inside the condition

37
02:40.940 --> 02:43.860
because the condition is false so it will not enter inside.

38
02:43.880 --> 02:47.120
So it will not call again this call will be done.

39
02:47.360 --> 02:49.610
So let me continue execution.

40
02:49.650 --> 02:50.050
Yeah.

41
02:50.180 --> 02:52.880
It has come to the end the function.

42
02:52.880 --> 02:54.150
Now watch carefully.

43
02:54.260 --> 03:01.910
If I execute again, again it is coming back to the end of a function, again coming back, see it has called itself

44
03:02.480 --> 03:04.360
total six times.

45
03:04.550 --> 03:07.610
Five four three two one and zero.

46
03:07.610 --> 03:14.650
So it called six times or six times and has to enter the function ending the function, ending the function.

47
03:14.750 --> 03:18.950
Next now it has came back to the main function.

48
03:19.400 --> 03:20.400
So that's it.

49
03:20.510 --> 03:21.670
I'll stop this.

50
03:21.980 --> 03:23.850
So this is how recursion works.

51
03:23.870 --> 03:31.910
Now let me make some change in this function and show you the execution.

52
03:32.060 --> 03:38.980
No let us write this print after the call, now let us see what is the output.

53
03:39.010 --> 03:43.990
Remove the break point and I'll show you what is the output of this function.

54
03:44.260 --> 03:51.340
So only the difference is that I have written Cout after the call so the output is one two three four

55
03:51.340 --> 03:52.040
five.

56
03:52.150 --> 03:54.430
So it is printed in the same order.

57
03:54.700 --> 03:56.080
So how this is working.

58
03:56.150 --> 04:00.960
I'll put a break point on F and I will run.  see the value of N..

59
04:01.030 --> 04:01.940
That is five.

60
04:02.080 --> 04:08.240
So it will enter inside condition is true so it will first line inside f.

61
04:08.280 --> 04:09.880
See this is the first line inside.

62
04:09.880 --> 04:15.650
If so it is calling itself again so it will call again itself the value four.

63
04:15.690 --> 04:25.540
So now again it has came from here inside and the value of n is  4 and 4 is also greater

64
04:25.540 --> 04:26.700
than zero.

65
04:26.710 --> 04:30.700
So four is greater than zero so it will enter inside and the first line is four minus 1.

66
04:30.700 --> 04:32.930
so again it will call itself.

67
04:33.250 --> 04:35.500
So I will just make the calls.

68
04:35.500 --> 04:41.950
Now the n values is 3, now n value is two, now the n value is 1.

69
04:42.010 --> 04:46.900
Now see this, n value is 1 so 1 minus 1,  its going to make a call.

70
04:46.930 --> 04:49.240
Again with the value is zero.

71
04:49.300 --> 04:56.260
mow Again it is 0,  0 means it is not greater than zero so it will not end there inside if and it will not

72
04:56.680 --> 05:03.340
call the function it will not call the function again and it will not print the value of n as zero it

73
05:03.490 --> 05:04.810
will come out.

74
05:04.810 --> 05:07.150
Now let me continue till come out.

75
05:07.270 --> 05:11.750
Yes you can see that it has reached the end of the function.

76
05:12.040 --> 05:13.860
Not if a continue.

77
05:14.080 --> 05:20.200
You remember it was calling itself every time but it has not yet print n so it will go back to the

78
05:20.200 --> 05:24.900
previous calls and start printing so it will go back to this called right .

79
05:25.120 --> 05:27.140
Where you can see the value of n is what

80
05:27.180 --> 05:29.880
1oh just now it was 0.

81
05:29.890 --> 05:34.950
So it is in the previous call the previous call it was 1 and print 1.

82
05:35.140 --> 05:40.040
That's it, it will go back to the previous call, so previous two this one it was two.

83
05:40.070 --> 05:42.410
Now I can see that the value of n is

84
05:42.920 --> 05:44.870
two, the value of n is  2.

85
05:44.890 --> 05:48.160
Yes it is going to print 2,  it will print 2.

86
05:48.320 --> 05:53.690
then go back to the previous call where the value of n was 3 now the  value of

87
05:53.740 --> 05:56.740
n is 3 so it will print 3.

88
05:56.860 --> 06:01.820
Yes let me continue to print the 3.

89
06:02.090 --> 06:06.920
Yes again it will go back see at the end of the function it will go back now.

90
06:07.000 --> 06:12.850
So the end the functions it will go back to the previous call where the value of n was four,  so it be printing

91
06:12.930 --> 06:16.200
four. then again.

92
06:16.750 --> 06:20.340
Previous call where the value was 5, so it will print 5.

93
06:20.530 --> 06:24.030
That was the first call so it has returned till the fitrst call.

94
06:24.060 --> 06:31.000
and Now back to the main function, that's all this is how a recursive function works. and recursive functions 

95
06:31.000 --> 06:35.990
are more similar to Loop  But these are more powerful than loop.

96
06:36.190 --> 06:39.760
So at some places where the loops are not useful.

97
06:39.940 --> 06:46.390
we Use recursion and sometimes we can use either recursion or we can use loop.

98
06:46.420 --> 06:54.180
So recursion is better than writing loops but it is difficult for understanding it's working.

99
06:54.310 --> 07:02.080
So once you spend some time on recursion and learn how to write them, then definitely that looks a lot easier

100
07:02.080 --> 07:04.620
than writing loops.

101
07:05.200 --> 07:06.630
So that's all about recursion.