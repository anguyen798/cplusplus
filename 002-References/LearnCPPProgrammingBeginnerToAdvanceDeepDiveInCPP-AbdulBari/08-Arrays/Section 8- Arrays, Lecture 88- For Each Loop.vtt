WEBVTT

0
00:01.000 --> 00:06.660
Now we will learn about for each loop in the beginning when I have given introduction, I told you about

1
00:06.700 --> 00:07.380
for each loop,

2
00:07.390 --> 00:10.200
Now we are in a position to understand it.

3
00:10.240 --> 00:15.480
This is used with a collection of elements, for each loop as use with collection of elements.

4
00:15.520 --> 00:17.770
So collection this element is nothing but an array.

5
00:18.370 --> 00:21.460
Yes for each loop works with array.

6
00:21.790 --> 00:25.990
So already we have learned about array and we have written some programs on an array.

7
00:25.990 --> 00:29.250
How we did those programs, we will see that then, we will learn about for each loop.

8
00:29.310 --> 00:30.060
Let us see.

9
00:30.170 --> 00:30.560
See.

10
00:30.580 --> 00:35.000
I have shown you that for loop as use for accessing all elements of an array.

11
00:35.260 --> 00:42.460
array name is A and there are six elements now for displaying all the elements I can use for loop

12
00:42.550 --> 00:48.220
that will iterate through all these elements or scan through all these elements so for loop is a counter

13
00:48.220 --> 00:48.940
control loop.

14
00:49.200 --> 00:50.320
So how it works.

15
00:50.320 --> 00:58.490
Initially i is 0, so I is 0 means i is zero, here A[0] means A[i]  means that is 8.

16
00:58.600 --> 00:59.790
So first 8 is printed

17
01:00.460 --> 01:01.270
So what is i.

18
01:01.420 --> 01:06.660
I is zero, then next I plus plus, I becomes 1 right. now

19
01:06.730 --> 01:08.690
A[i] means A[1]

20
01:08.740 --> 01:10.990
A[1] is what?  6.

21
01:11.230 --> 01:18.100
So I is 1 A[i] is 6 so cout A[i] mean 6 will be printed.

22
01:18.580 --> 01:26.800
So in this loop I is taking the indices off elements right, array using for loop.

23
01:26.800 --> 01:29.610
Now the same thing can be access using for each loop.

24
01:29.620 --> 01:33.880
Let us see this syntax and example, for each loop is written

25
01:33.880 --> 01:38.140
Same as for we don't write each here just for. then

26
01:38.740 --> 01:41.100
Integer x.

27
01:41.140 --> 01:53.900
I'm taking another variable X integer X from A.  X in A we read it  like this X in a.

28
01:54.050 --> 02:03.800
So if I read the complete statement let me read first then and explain for each X in A for each X in

29
02:03.830 --> 02:04.420
A means

30
02:04.430 --> 02:08.420
How many X are there in that this is X next x.

31
02:08.450 --> 02:09.980
Next Next X.

32
02:10.040 --> 02:11.260
x.....

33
02:11.360 --> 02:15.360
So this X will take all the values in an array. now here

34
02:15.380 --> 02:21.040
If I print cout, X I will print, x.

35
02:21.110 --> 02:22.810
So let us see how it works now.

36
02:23.090 --> 02:32.540
First time X, X will be 8, x is 8, so X is a variable in this the first value of array will be copied so

37
02:32.660 --> 02:34.030
8 will be copied in x.

38
02:34.070 --> 02:38.750
So when i print x, 8 will be printed, next time inside same x.

39
02:38.760 --> 02:41.490
This 6 will be copied 6.

40
02:41.540 --> 02:44.350
Next time they print 6 will be displayed.

41
02:44.470 --> 02:51.940
See in contrast to this I was in X but not X is element itself.

42
02:51.950 --> 02:55.870
So this X will get all the values from an array one by one.

43
02:55.880 --> 03:02.710
So for each value X in A, this is how it works, now what is the benefit.

44
03:02.750 --> 03:05.750
This way also you can access everything this also you can access everything.

45
03:06.160 --> 03:10.530
But here you have to mention the size. size of an array is 6.

46
03:10.580 --> 03:15.630
So you should stop index at the 5 so you should know what is the size of an array, here

47
03:15.770 --> 03:17.120
There is no size.

48
03:17.300 --> 03:20.210
There is no size, this is the benefit of 4 each loop.

49
03:20.390 --> 03:21.800
So this is dependent on the size.

50
03:21.800 --> 03:26.270
This is not dependent on the size it will access all the elements, as many elements are there.

51
03:26.270 --> 03:31.850
If there are six elements or 600 elements whatever the number of elements are it will access all of them.

52
03:31.850 --> 03:34.250
now one more thing,

53
03:34.400 --> 03:35.540
See here.

54
03:36.200 --> 03:44.840
If I write plus plus X so First value will be 8 yes 8 then it will print.

55
03:44.840 --> 03:46.540
Plus plus 8 means 9.

56
03:47.030 --> 03:48.680
So this will become 9.

57
03:48.980 --> 03:54.530
What about original value, original value will not change because X is getting a copy of that value

58
03:54.620 --> 03:55.830
x is a separate variable.

59
03:55.840 --> 04:02.270
If you're getting a copy of that value, then the next time it will get 6, 6 then ++x

60
04:02.270 --> 04:06.480
This will become seven and seven is printed but the original value remains six only.

61
04:06.540 --> 04:14.390
Only so the point I have to show you is that this X will get the copy of a value not if I want to modify

62
04:14.420 --> 04:19.220
that value x should represent that value directly, you should not have a copy.

63
04:19.280 --> 04:22.490
X means this X should be this one only.

64
04:22.490 --> 04:25.310
So if I say plus plus X, so that six should become seven.

65
04:26.120 --> 04:30.650
So yes for that we can write a reference here.

66
04:30.650 --> 04:32.100
What is the reference.

67
04:32.170 --> 04:35.180
Reference will give a name to the same value.

68
04:35.180 --> 04:37.690
That is another name for same value.

69
04:37.820 --> 04:41.340
We have a topic called references in point or section.

70
04:41.340 --> 04:42.320
There you will understand.

71
04:42.320 --> 04:44.000
I will not explain reference right now.

72
04:44.160 --> 04:45.410
Just remember this.

73
04:45.410 --> 04:48.480
If you don't give a reference that is valuable not modified.

74
04:48.710 --> 04:54.580
If you were a plus plus because if you get a copy of that value but if you write & then that

75
04:54.580 --> 05:01.630
value is itself called as X when you say ++ X. This will become 7 and that 6 will become 7.

76
05:01.730 --> 05:06.780
This is one thing no one more benefit of using for each loop I will show you,

77
05:07.050 --> 05:12.370
See there is an array A, I know A is there but I don't know its data type.

78
05:12.650 --> 05:15.090
I don't know whether int  or float or double.

79
05:15.110 --> 05:15.620
I don't know.

80
05:15.950 --> 05:21.890
So this X, what the data type I should declare, int , float or double, which type. instead of defining

81
05:21.890 --> 05:23.590
the data type by ourself.

82
05:23.600 --> 05:30.540
We can simply say auto here so automatically the compiler will make this variable X same as the

83
05:30.540 --> 05:33.140
data type of this array.

84
05:33.170 --> 05:39.560
This is more powerful feature of C++ along with the for each loop and one more point about for each loop

85
05:39.560 --> 05:45.980
is that it will work up on a collection of elements only either it may be an array or vector or any

86
05:45.980 --> 05:50.600
other thing that we will study later on but it will not work on pointers right.

87
05:50.660 --> 05:51.970
So right now we don't know pointers, but

88
05:51.990 --> 05:56.620
Just remember this it will not work up on pointers it will work on collection of values only.

89
05:56.630 --> 06:01.080
Just remember this that is sufficient later  you will understand this.

90
06:01.220 --> 06:01.880
So that's it.

91
06:02.240 --> 06:06.240
This is a for each loop. that's all in this video.