WEBVTT

00:00:00.000 --> 00:00:08.000
Hello everyone, this is Steve Gilbert. Welcome to lecture 6 on programming with loops.

00:00:08.000 --> 00:00:17.000
Before you get started make sure you've gone into Canvas and that you have

00:00:17.000 --> 00:00:26.000
you have clicked week 2. In week 2 you've gone and clicked the lecture exercise in programming with loops, the third tab over.

00:00:26.000 --> 00:00:41.000
On the lecture exercise click the starter form. When you get the starter form go ahead and rename it here so you'll be able to find it when we get started.

00:00:41.000 --> 00:00:47.000
Now C++, like Java, has several different kinds of loops.

00:00:47.000 --> 00:00:50.000
They have four of them. There's a while loop,

00:00:50.000 --> 00:00:53.000
there's a do while loop,

00:00:53.000 --> 00:01:01.000
there is a for loop, and then there is the simplified for loop we saw in the last lecture.

00:01:01.000 --> 00:01:11.000
But just knowing about these four kinds of loops really doesn't give you any guidance when you want to decide what loop should I use for this problem.

00:01:11.000 --> 00:01:16.000
For that you really need a different way of thinking about loops.

00:01:16.000 --> 00:01:27.000
And so rather than thinking about the four kinds of loops syntax, think about the five ways to control the number of repetitions.

00:01:27.000 --> 00:01:40.000
Last lecture we looked at range iteration. We visited every element in the container. That's what the simplified or the range based for loop is for.

00:01:40.000 --> 00:01:51.000
We have counter controlled iteration. We're going to look at that today. That's when we have a fixed number of times we're going to repeat. Do this loop ten times.

00:01:51.000 --> 00:02:06.000
We have a sentinel loop. A sentinel loop is for input. When we look at the contents of input and we look for a specific value that tells us to stop looping.

00:02:06.000 --> 00:02:15.000
We have a data loop. A data loop is also known as an end of file loop. When we simply want to process all the data that remains in input.

00:02:15.000 --> 00:02:20.000
So both the sentinel loop and the data loop are used for input loops.

00:02:20.000 --> 00:02:30.000
Finally we have a limit loop. A limit loop is when we want to do a calculation, look at the calculation, and somehow determine are we close enough?

00:02:30.000 --> 00:02:44.000
Have we reached our limit? So we're going to use this to think about loops. We're going to use these five ideas to think about loops when we write our loops.

00:02:44.000 --> 00:02:49.000
So let's look first at a little bit of review for the range loops.

00:02:49.000 --> 00:03:05.000
So C++11 introduced this new simplified range based for loop. Similar to the for loop in Python and the new for loop introduced in Java 5 in Java.

00:03:05.000 --> 00:03:18.000
And so this will allow you to visit every element inside a collection. It works on the string type, it works on the vector type, it works on the built in array type.

00:03:18.000 --> 00:03:24.000
It actually works on all the collection types that are in the standard library.

00:03:24.000 --> 00:03:39.000
And the basic syntax looks like this. For, then you declare a variable. Now you can specifically specify the type, like char C, or you can use auto here, auto E.

00:03:39.000 --> 00:03:45.000
Then a colon, and then just the name of the collection variable that you want to loop over.

00:03:45.000 --> 00:03:51.000
This will go through each copy of the variable and put that variable inside E.

00:03:51.000 --> 00:03:57.000
Now there are three variations in C++. Java has only one variation.

00:03:57.000 --> 00:04:10.000
In, similar to Java, we can use value iteration. Meaning take the first element out of the collection, put it in the variable E, put a copy of it in the variable E.

00:04:10.000 --> 00:04:16.000
Then take the second one, put it in the variable E. Then take the third one, put it in the variable E.

00:04:16.000 --> 00:04:23.000
Instead of making a copy of each of those elements though, we can actually look directly at the element.

00:04:23.000 --> 00:04:33.000
And so this is for auto ref. Again, you don't need to use auto here, you can use char or int or whatever the type of the elements in the collection are.

00:04:33.000 --> 00:04:40.000
And this actually looks at the individual elements, so you can actually change them.

00:04:40.000 --> 00:04:46.000
Now suppose our collection was filled with very, very large elements. Say, pictures.

00:04:46.000 --> 00:04:52.000
You were going through the camera roll on your iPhone.

00:04:52.000 --> 00:05:00.000
This first one would be very, very expensive to make a copy of each picture just to look at it.

00:05:00.000 --> 00:05:09.000
The second one would be more efficient, but it's possible that the function would modify the pictures in your picture roll.

00:05:09.000 --> 00:05:13.000
What you might want to do there is use this third one.

00:05:13.000 --> 00:05:22.000
For this third one, we look at the element, but because of the const in front of it, we're prevented from modifying it.

00:05:22.000 --> 00:05:27.000
Okay, so that was what we did last lecture.

00:05:27.000 --> 00:05:31.000
Now let's look at counter-controlled loops.

00:05:31.000 --> 00:05:43.000
So a counter-controlled loop creates a separate variable called a loop control variable, and that will control the number of repetitions.

00:05:43.000 --> 00:05:45.000
The counter.

00:05:45.000 --> 00:05:48.000
Now we can use this loop control variable two ways.

00:05:48.000 --> 00:05:53.000
Traditionally we use this to the for loop, but you can do it with a while loop as well.

00:05:53.000 --> 00:06:01.000
One way is when we want to loop through a string, and we want to access the elements of the string.

00:06:01.000 --> 00:06:07.000
Or we want to access the elements of an array, or a vector, or something like that.

00:06:07.000 --> 00:06:18.000
To do that, because the array and the string and the vector all start their element numbering at zero, we want to start our index at zero.

00:06:18.000 --> 00:06:27.000
And so, because we don't want to think about how to end that, we use an asymmetric bounds.

00:06:27.000 --> 00:06:37.000
Notice it includes the initial bounds, the lower bounds, index zero, but it excludes the upper bounds.

00:06:37.000 --> 00:06:40.000
So notice it's less than ten here.

00:06:40.000 --> 00:06:46.000
Now the name for these loop control variables, i and j, are very common names.

00:06:46.000 --> 00:06:55.000
If you have a nested loop, you'd start with i and then go to j, and then maybe k if you had three nested loops inside each other.

00:06:55.000 --> 00:07:03.000
This int i = 0 is initialized before the loop is entered.

00:07:03.000 --> 00:07:13.000
And the scope of the counter i, or the control variable i, is only inside the body of the for loop.

00:07:13.000 --> 00:07:17.000
It doesn't extend after the for loop.

00:07:17.000 --> 00:07:26.000
Now the test expression, the second part of this counter controlled loop, is tested before the loop is entered.

00:07:26.000 --> 00:07:33.000
And so we call this kind of loop a guarded loop, meaning you can't get to the actions unless you pass the test.

00:07:33.000 --> 00:07:40.000
This condition here is the loop guard.

00:07:40.000 --> 00:07:46.000
Finally, after we've gone through and executed all the statements in the body of the loop,

00:07:46.000 --> 00:07:52.000
we come back to this loop control variable and increment it here.

00:07:52.000 --> 00:07:54.000
This is called the update expression.

00:07:54.000 --> 00:08:02.000
This is not updated after we do the test, it's updated after we do all the things in the body.

00:08:02.000 --> 00:08:08.000
Now the for loop can also be used for a second purpose.

00:08:08.000 --> 00:08:13.000
That is, it can be used to generate a sequence of data.

00:08:13.000 --> 00:08:22.000
And when we do that, you use a slightly different set of conditions, a different set of bounds called symmetric bounds.

00:08:22.000 --> 00:08:32.000
What that means is you'll start at the lower bounds and include that, but you'll also include the upper bounds.

00:08:32.000 --> 00:08:41.000
So if we wanted to write a loop that would print from 1 to 10, rather than writing for 0, int i = 0, i < 10,

00:08:41.000 --> 00:08:49.000
and then printing i + 1, we'd print for int i = 1, i <= 10.

00:08:49.000 --> 00:08:56.000
So when you generate sequences of data, you want to include both the lower bounds, int i = 1,

00:08:56.000 --> 00:09:00.000
and the upper bounds, i <= 10.

00:09:00.000 --> 00:09:04.000
Notice with the asymmetric bounds we didn't include the upper bounds 10.

00:09:04.000 --> 00:09:13.000
We said keep going while i < 10.

00:09:13.000 --> 00:09:22.000
Now for strings and counter-controlled loops, there is a pattern that you can memorize.

00:09:22.000 --> 00:09:32.000
And first, initialize both the lower and upper bounds in the initialization section.

00:09:32.000 --> 00:09:42.000
Both the upper and lower bounds, in other words, i and what you're going to test i against, the size or the length.

00:09:42.000 --> 00:09:46.000
Use size t as the control variable, not int.

00:09:46.000 --> 00:09:54.000
That's because strings, the size function, the size member function, returns a size t.

00:09:54.000 --> 00:10:05.000
Initialize the upper bounds with str.size, and make sure that the control variable never, ever goes less than 0.

00:10:05.000 --> 00:10:12.000
So some of the loops that you would write in Java simply won't work in C++.

00:10:12.000 --> 00:10:19.000
Now we are going to use this first idiom we're going to look at. It's called the "building a string" idiom.

00:10:19.000 --> 00:10:30.000
So the input for building a string will be a const string ref. It won't be modified.

00:10:30.000 --> 00:10:37.000
The result will be an empty string. The output will be the empty string.

00:10:37.000 --> 00:10:44.000
Each time you go through the loop, you'll concatenate something to the result to produce the output.

00:10:44.000 --> 00:10:56.000
So we're going to do an exercise to show you this idiom and to get you started with some hands-on work with processing strings with counter-controlled loops.

00:10:56.000 --> 00:11:01.000
And so this is the exercise called "to reverse."

00:11:01.000 --> 00:11:08.000
And so this will be in A in your starter code in ICO6.

00:11:08.000 --> 00:11:17.000
And so go ahead and put your name on the top of it.

00:11:17.000 --> 00:11:28.000
So a "building a string" idiom produces a new string. So the output is going to be called "string."

00:11:28.000 --> 00:11:36.000
"To reverse" is the name of a function. It takes a single string as an argument and produces a duplicate with the characters in reverse order.

00:11:36.000 --> 00:11:43.000
You may use the library function "size" and "at." The argument will not be modified.

00:11:43.000 --> 00:11:58.000
So "string to reverse." Its argument is not going to be modified, so it's a const string ref str.

00:11:58.000 --> 00:12:04.000
The output is going to be a new string, so "string result."

00:12:04.000 --> 00:12:10.000
And we're going to return the result.

00:12:10.000 --> 00:12:17.000
Okay, so let's try that. Let's go ahead and, oh, I need to open a terminal on that.

00:12:17.000 --> 00:12:22.000
So let me open a terminal on A. Open an integrated terminal.

00:12:22.000 --> 00:12:25.000
So now we've opened that folder A.

00:12:25.000 --> 00:12:33.000
And let's go ahead and do "make test."

00:12:33.000 --> 00:12:40.000
And all of the code compiles correctly. Of course it doesn't produce the correct output.

00:12:40.000 --> 00:12:45.000
It isn't reversed string, but we have the mechanics working.

00:12:45.000 --> 00:12:53.000
So now we're going to go into that second pattern for counter-controlled loops.

00:12:53.000 --> 00:13:01.000
So we're going to write "for something something do something."

00:13:01.000 --> 00:13:13.000
So in this first section, we're going to create the control variable, the lower bounds, and the upper bounds, what the highest part is.

00:13:13.000 --> 00:13:27.000
So we're going to say "for size p, i = 0, and len = str.size."

00:13:27.000 --> 00:13:34.000
So notice we're doing both of these. Separate them with a comma, not with a semicolon.

00:13:34.000 --> 00:13:43.000
Our upper bounds is going to be "i < len."

00:13:43.000 --> 00:13:49.000
And then we're going to go "++i."

00:13:49.000 --> 00:13:59.000
Now you might wonder why I can't say "str.size t, i = 0, i < str.size++i."

00:13:59.000 --> 00:14:04.000
You'll see many people do that, but the size is not going to change here.

00:14:04.000 --> 00:14:10.000
So we don't want to keep calling this function every time we come back to this condition.

00:14:10.000 --> 00:14:17.000
So this is a better way to do that. Save the size. Make sure you save it in a size t.

00:14:17.000 --> 00:14:25.000
So now we're at step four, or we're at the last part of the building a string idiom.

00:14:25.000 --> 00:14:36.000
And what we're going to do is we're going to say "result = str."

00:14:36.000 --> 00:14:39.000
And I can use a substring or I can use charAt.

00:14:39.000 --> 00:14:50.000
So I can use strAt, or at, not charAt. strAt i + result.

00:14:50.000 --> 00:14:55.000
So you notice each time, instead of putting the character after the one before it,

00:14:55.000 --> 00:15:00.000
by switching the order of these two things, I'm putting the character in front of it,

00:15:00.000 --> 00:15:05.000
and I'm reversing the string. I'm reversing the string.

00:15:05.000 --> 00:15:12.000
I'm going to show you a couple more ways to do this, but let's look to make sure that this works correctly.

00:15:12.000 --> 00:15:17.000
We'll do Ctrl+L to clear it, and do make test.

00:15:17.000 --> 00:15:24.000
And in fact that reverses all of the input strings correctly.

00:15:24.000 --> 00:15:30.000
Now many of you, I'm going to comment this one out, because that's a very simple way to do it.

00:15:30.000 --> 00:15:37.000
Many of you would solve this problem like this.

00:15:37.000 --> 00:16:04.000
You'd say for size p, i = strSize -1, i >= 0, - - i, result = result.

00:16:04.000 --> 00:16:12.000
Or let's do the shorthand, result += strAt i.

00:16:12.000 --> 00:16:17.000
Now this would make sense in Java, but it has a problem here.

00:16:17.000 --> 00:16:26.000
Here, when i is 0, it'll add the first element here, at the end of it.

00:16:26.000 --> 00:16:31.000
Then we do i - -. Well that doesn't go to -1.

00:16:31.000 --> 00:16:36.000
As a matter of fact, this condition cannot ever be false.

00:16:36.000 --> 00:16:43.000
And so if we come down here, and we try and just make it, notice we get an error there.

00:16:43.000 --> 00:16:53.000
We're doing a comparison of an unsigned expression, greater or equal to 0, by definition is always true.

00:16:53.000 --> 00:16:57.000
By definition is always true.

00:16:57.000 --> 00:17:02.000
And so that's an error. This piece of code is an error.

00:17:02.000 --> 00:17:12.000
Also, even if it did work, what if the input string was empty?

00:17:12.000 --> 00:17:18.000
Again, strSize -1 would not be, strSize would be 0.

00:17:18.000 --> 00:17:26.000
0 - 1 is not -1. It's all unsigned numbers.

00:17:26.000 --> 00:17:35.000
So when I subtract 1 from 0, I get the very, very large number 18 quintillion, or something like that.

00:17:35.000 --> 00:17:37.000
Very, very large number.

00:17:37.000 --> 00:17:41.000
So this simply won't even compile.

00:17:41.000 --> 00:17:47.000
We could fix it like this.

00:17:47.000 --> 00:17:54.000
So now it'll compile, but down here, we would need to remember to go i - 1.

00:17:54.000 --> 00:18:01.000
Because of course, strSize would crash when we ran it.

00:18:01.000 --> 00:18:10.000
When i was strSize, and we tried to get the str at strSize, that is out of bounds, and it would crash at that point.

00:18:10.000 --> 00:18:13.000
So this version will work as well.

00:18:13.000 --> 00:18:17.000
Let's go ahead and clear that.

00:18:17.000 --> 00:18:21.000
And do make test.

00:18:21.000 --> 00:18:30.000
But you can see if you want to do that, you have to always be aware that you cannot go less than 0.

00:18:30.000 --> 00:18:35.000
It literally is impossible for you to do that.

00:18:35.000 --> 00:18:42.000
So either two of those are perfectly fine.

00:18:42.000 --> 00:18:48.000
Okay, so now let's look at processing substrings.

00:18:48.000 --> 00:18:51.000
Here is a substring catapult.

00:18:51.000 --> 00:19:02.000
Notice that it has 7 characters, or 8 characters, indexes 0 through 7.

00:19:02.000 --> 00:19:08.000
Suppose we want to count the number of times the cat appears in the string.

00:19:08.000 --> 00:19:18.000
Well, I would need to look at 3 characters at a time, not a single character like the idiom we looked at before.

00:19:18.000 --> 00:19:23.000
So this algorithm and technique is worth mentioning.

00:19:23.000 --> 00:19:25.000
Worth memorizing.

00:19:25.000 --> 00:19:28.000
So here we have 3 variables.

00:19:28.000 --> 00:19:32.000
We have our counter control variable i,

00:19:32.000 --> 00:19:38.000
slen, which is going to be the length of our substring, cat in this case,

00:19:38.000 --> 00:19:44.000
and len, which is going to be the size of the string, in this case 7.

00:19:44.000 --> 00:19:51.000
We set i and slen, i, not to be 0, but to be the size of the substring.

00:19:51.000 --> 00:19:58.000
So i is pointing right here at 3.

00:19:58.000 --> 00:20:04.000
Then in our loop, rather than stopping at i less than len,

00:20:04.000 --> 00:20:09.000
so len of course is 8 in this case because there are 8 characters,

00:20:09.000 --> 00:20:15.000
we're going to go i plus len, so we have a little pointer here, or an index here,

00:20:15.000 --> 00:20:19.000
where we're going to stop, this second little arrow right here.

00:20:19.000 --> 00:20:23.000
Now we're going to extract the substring we're looking at

00:20:23.000 --> 00:20:29.000
by taking s.substring, i minus slen, slen.

00:20:29.000 --> 00:20:32.000
So again, this is something you can memorize.

00:20:32.000 --> 00:20:34.000
It will always work.

00:20:34.000 --> 00:20:40.000
And then you can do conditionals to examine the substring that you extracted.

00:20:40.000 --> 00:20:45.000
So we're going to do this with an exercise called count.

00:20:45.000 --> 00:20:50.000
And we're going to count the number, just like I'd count the number of cats here,

00:20:50.000 --> 00:20:57.000
we're going to count the number of times the code appears in a string.

00:20:57.000 --> 00:21:03.000
Now there's a couple little details here that make it a little bit more complex.

00:21:03.000 --> 00:21:07.000
So this is going to be b.

00:21:07.000 --> 00:21:13.000
I'm going to put my name on top of it.

00:21:13.000 --> 00:21:19.000
And I'm going to go ahead and open a terminal here

00:21:19.000 --> 00:21:22.000
on b so I can write code on it.

00:21:22.000 --> 00:21:24.000
So let's look at the instructions.

00:21:24.000 --> 00:21:27.000
We're going to write a function called count code.

00:21:27.000 --> 00:21:30.000
It will take a single string as an argument.

00:21:30.000 --> 00:21:32.000
It will not be modified.

00:21:32.000 --> 00:21:37.000
It will return the number of times that a pattern like code appears in the string.

00:21:37.000 --> 00:21:40.000
Any character at all is acceptable in place of the d.

00:21:40.000 --> 00:21:44.000
You can use size, substring, at, and back.

00:21:44.000 --> 00:21:49.000
You may not use find.

00:21:49.000 --> 00:21:52.000
So this is going to return a count, so it's not going to return a string.

00:21:52.000 --> 00:21:54.000
It's going to return an int.

00:21:54.000 --> 00:21:59.000
The function is named count code.

00:21:59.000 --> 00:22:08.000
The argument is a string that's not modified, so that's a const string reference str.

00:22:08.000 --> 00:22:13.000
The result in this case is an int rather than a string.

00:22:13.000 --> 00:22:18.000
And if you do that, you're going to have an error, because result is a primitive type.

00:22:18.000 --> 00:22:28.000
It's uninitialized, so we want to initialize that to zero.

00:22:28.000 --> 00:22:33.000
And finally we want to return the result.

00:22:33.000 --> 00:22:37.000
We'll go ahead and check to make sure that I have the syntax right

00:22:37.000 --> 00:22:40.000
by making it and testing it.

00:22:40.000 --> 00:22:48.000
So I'll make test.

00:22:48.000 --> 00:22:50.000
And I actually got 40%.

00:22:50.000 --> 00:22:54.000
I didn't really do any work on it, because I'm returning zero,

00:22:54.000 --> 00:22:57.000
and zero is correct for several of these answers.

00:22:57.000 --> 00:22:59.000
Code doesn't appear.

00:22:59.000 --> 00:23:02.000
But the important part here is that it compiles and it links,

00:23:02.000 --> 00:23:05.000
and I have that part correct.

00:23:05.000 --> 00:23:07.000
Okay, now our variables.

00:23:07.000 --> 00:23:20.000
So size T, SLEN equals four.

00:23:20.000 --> 00:23:24.000
We're looking for four.

00:23:24.000 --> 00:23:35.000
And our loop for size TI equals SLEN.

00:23:35.000 --> 00:23:37.000
And, of course, LEN.

00:23:37.000 --> 00:23:43.000
LEN equals std size.

00:23:43.000 --> 00:23:47.000
I less than or equal to SLEN.

00:23:47.000 --> 00:23:50.000
To LEN, not SLEN.

00:23:50.000 --> 00:23:54.000
Plus plus I.

00:23:54.000 --> 00:23:58.000
So that will allow us to go through and get four characters at a time,

00:23:58.000 --> 00:24:00.000
which we'll do with substring.

00:24:00.000 --> 00:24:12.000
So string subs equals str substring I minus SLEN.

00:24:12.000 --> 00:24:13.000
SLEN.

00:24:13.000 --> 00:24:17.000
So we're getting four characters at a time.

00:24:17.000 --> 00:24:21.000
Now we can see, now I know I'm guaranteed,

00:24:21.000 --> 00:24:24.000
because I've memorized this idiom right here,

00:24:24.000 --> 00:24:29.000
I'm guaranteed that I have four characters in subs,

00:24:29.000 --> 00:24:35.000
because I've made sure that this only allows me to get four characters at a time.

00:24:35.000 --> 00:24:50.000
And that means I can say if subs substring zero two is equal to CO,

00:24:50.000 --> 00:25:01.000
it starts with CO, and subs back equals E,

00:25:01.000 --> 00:25:04.000
then it's that code pattern I'm looking for.

00:25:04.000 --> 00:25:11.000
And I can increment result.

00:25:11.000 --> 00:25:19.000
So here's the pattern for processing substrings inside a string.

00:25:19.000 --> 00:25:21.000
So let's try that out again.

00:25:21.000 --> 00:25:28.000
Let's clear the thing and do a make test.

00:25:28.000 --> 00:25:33.000
Now let me show you another way to do it, just like I did previously.

00:25:33.000 --> 00:25:40.000
So this is the way I recommend, but,

00:25:40.000 --> 00:25:44.000
actually I'm going to leave SLEN there.

00:25:44.000 --> 00:25:49.000
I'm going to comment that out.

00:25:49.000 --> 00:25:52.000
We could do it like this.

00:25:52.000 --> 00:26:06.000
I'm not quite sure what just happened there.

00:26:06.000 --> 00:26:14.000
I must have, oh, no.

00:26:14.000 --> 00:26:16.000
Let me save it.

00:26:16.000 --> 00:26:22.000
I'm not quite sure why I'm getting a,

00:26:22.000 --> 00:26:36.000
I have no idea what this is.

00:26:36.000 --> 00:26:40.000
Hold on, I'm going to pause this for a while while I try and figure out what,

00:26:40.000 --> 00:26:41.000
okay, I'm back.

00:26:41.000 --> 00:26:43.000
I don't know why it was doing that.

00:26:43.000 --> 00:26:49.000
I just kind of ended up closing the little window that opened up and did it again.

00:26:49.000 --> 00:26:50.000
So let's try it this way.

00:26:50.000 --> 00:26:52.000
Let's try it forward.

00:26:52.000 --> 00:27:00.000
So for size p, i equals zero.

00:27:00.000 --> 00:27:08.000
LEN equals third size.

00:27:08.000 --> 00:27:18.000
I less than LEN plus plus I.

00:27:18.000 --> 00:27:27.000
String subs equals third subster,

00:27:27.000 --> 00:27:30.000
I SLEN.

00:27:30.000 --> 00:27:34.000
So starting at zero, getting four characters.

00:27:34.000 --> 00:27:49.000
And if subs size equals four,

00:27:49.000 --> 00:28:01.000
and subs substring zero two equals CO,

00:28:01.000 --> 00:28:11.000
and subs back equals E,

00:28:11.000 --> 00:28:18.000
then result plus plus.

00:28:18.000 --> 00:28:23.000
So this will work as well, but notice I had to add this extra case here,

00:28:23.000 --> 00:28:28.000
because it's possible that I wouldn't get four characters here

00:28:28.000 --> 00:28:32.000
when the I is gone past the length.

00:28:32.000 --> 00:28:35.000
Now, you might try and fix that.

00:28:35.000 --> 00:28:41.000
In fact, in Java you would fix it by simply saying size minus three.

00:28:41.000 --> 00:28:43.000
Why doesn't that work here?

00:28:43.000 --> 00:28:48.000
That doesn't work here because these are unsigned numbers.

00:28:48.000 --> 00:28:51.000
If the length is less than three,

00:28:51.000 --> 00:28:58.000
this will give you a huge number and your program will crash.

00:28:58.000 --> 00:28:59.000
Program will crash.

00:28:59.000 --> 00:29:01.000
So I'm going to leave that there.

00:29:01.000 --> 00:29:09.000
I'm going to comment out this part right here.

00:29:09.000 --> 00:29:14.000
And I want to show you the program crashing.

00:29:14.000 --> 00:29:16.000
Because you'll notice on our inputs here,

00:29:16.000 --> 00:29:22.000
we have two strings, one string that is less than zero.

00:29:22.000 --> 00:29:26.000
And so this is the effect we'll get if we do that,

00:29:26.000 --> 00:29:30.000
which would be the standard way you'd write it in Java.

00:29:30.000 --> 00:29:33.000
Make test.

00:29:33.000 --> 00:29:41.000
And notice this substring pos, which is one, this size, which is zero.

00:29:41.000 --> 00:29:45.000
So notice that this aborted, it core dumped,

00:29:45.000 --> 00:29:49.000
which means basically that it crashed at that point.

00:29:49.000 --> 00:29:55.000
So this thing that would work in Java simply won't work in C++.

00:29:55.000 --> 00:30:04.000
So we can put it like this.

00:30:04.000 --> 00:30:09.000
And let's make sure it will work again.

00:30:09.000 --> 00:30:14.000
Let's do make test.

00:30:14.000 --> 00:30:17.000
Okay, so that works perfectly fine.

00:30:17.000 --> 00:30:20.000
But I actually think this is a little more complex.

00:30:20.000 --> 00:30:25.000
It goes through more times than are necessary.

00:30:25.000 --> 00:30:29.000
And I think learning this one is a little bit better.

00:30:29.000 --> 00:30:31.000
This one is a little bit easier.

00:30:31.000 --> 00:30:33.000
So I'm going to comment out that one.

00:30:33.000 --> 00:30:38.000
Even though it works, I kind of don't like because it's a little complex.

00:30:38.000 --> 00:30:45.000
I'm going to uncomment this one.

00:30:45.000 --> 00:30:52.000
And you comment and uncomment with just control and the slash character.

00:30:52.000 --> 00:30:56.000
Control and the slash character.

00:30:56.000 --> 00:31:00.000
And let me just go a third time to make sure it works.

00:31:00.000 --> 00:31:08.000
Control L, control L.

00:31:08.000 --> 00:31:15.000
And yes, we get the right answer.

00:31:15.000 --> 00:31:22.000
Okay, so processing characters right here.

00:31:22.000 --> 00:31:25.000
And look at the two reverse example we did.

00:31:25.000 --> 00:31:31.000
And processing substrings, this one right here.

00:31:31.000 --> 00:31:33.000
Now there are a couple of other loops.

00:31:33.000 --> 00:31:35.000
Those are the only two exercises we're going to do.

00:31:35.000 --> 00:31:38.000
But I want to talk about a couple of other kinds of loops,

00:31:38.000 --> 00:31:40.000
which are indefinite loop.

00:31:40.000 --> 00:31:45.000
The simplest indefinite loop syntactically uses while.

00:31:45.000 --> 00:31:50.000
And basically it's while the condition is true,

00:31:50.000 --> 00:31:54.000
do these statements over and over and over again.

00:31:54.000 --> 00:31:58.000
So let me show you a while loop and tell me how many times it repeats.

00:31:58.000 --> 00:32:02.000
So I call a function randchar.

00:32:02.000 --> 00:32:07.000
It gives me back a random character and I store it in the variable C.

00:32:07.000 --> 00:32:12.000
Now while C is not equal to the Q character, I print out C.

00:32:12.000 --> 00:32:16.000
And then I set C again to the next random character.

00:32:16.000 --> 00:32:19.000
How many times will that loop repeat?

00:32:19.000 --> 00:32:22.000
Well, it might repeat once.

00:32:22.000 --> 00:32:24.000
It might repeat not at all.

00:32:24.000 --> 00:32:27.000
The first character I get might be a Q.

00:32:27.000 --> 00:32:29.000
Or it might never come up.

00:32:29.000 --> 00:32:36.000
The randchar function might in fact never return me a random Q in that case.

00:32:36.000 --> 00:32:39.000
So you can't tell by looking at the loop.

00:32:39.000 --> 00:32:45.000
And that's why we call it an indefinite loop, an indefinite loop.

00:32:45.000 --> 00:32:51.000
Now one kind of indefinite loop is a primed sentinel loop.

00:32:51.000 --> 00:32:55.000
A sentinel loop reads from input.

00:32:55.000 --> 00:33:01.000
And when it reads a special value from input, the sentinel, it stops.

00:33:01.000 --> 00:33:06.000
The primed loop is one technique for writing a sentinel loop.

00:33:06.000 --> 00:33:10.000
It was named after this old-fashioned water pump.

00:33:10.000 --> 00:33:14.000
And the old-fashioned water pump back in the old west

00:33:14.000 --> 00:33:19.000
was simply a pipe stuck in the ground with a piston inside

00:33:19.000 --> 00:33:25.000
that drew water from down underground by using suction.

00:33:25.000 --> 00:33:31.000
But to get suction, they had to have a good seal around the piston.

00:33:31.000 --> 00:33:37.000
And so to get a good seal, you would first pour a bucket of water into the pump.

00:33:37.000 --> 00:33:42.000
That would create a seal around the piston, and so you could start pumping.

00:33:42.000 --> 00:33:46.000
And that pouring the bucket of water in before you started pumping

00:33:46.000 --> 00:33:48.000
is called priming the loop.

00:33:48.000 --> 00:33:51.000
And so this loop is called a primed loop.

00:33:51.000 --> 00:33:54.000
And here's the algorithm for that.

00:33:54.000 --> 00:33:57.000
You read a value into a variable.

00:33:57.000 --> 00:34:02.000
If the variable is not the sentinel, you process the variable,

00:34:02.000 --> 00:34:04.000
then read the next value.

00:34:04.000 --> 00:34:09.000
So while the variable is not the sentinel, process the variable,

00:34:09.000 --> 00:34:15.000
read the next value.

00:34:15.000 --> 00:34:22.000
Now, we could do the same thing and not require two read statements.

00:34:22.000 --> 00:34:23.000
So look back here.

00:34:23.000 --> 00:34:27.000
Notice I have read a value into a variable before the loop,

00:34:27.000 --> 00:34:32.000
and at the end of the loop I have read the next value into the variable.

00:34:32.000 --> 00:34:36.000
What if we only want to have the read a value into a variable part once?

00:34:36.000 --> 00:34:40.000
For that, we can use a flag-controlled loop.

00:34:40.000 --> 00:34:45.000
So instead of two read statements, you can use a Boolean flag

00:34:45.000 --> 00:34:48.000
to signal if you've found the sentinel.

00:34:48.000 --> 00:34:51.000
So here you'd create a flag.

00:34:51.000 --> 00:34:55.000
I've called it finished here of type bool, and I've set it to false.

00:34:55.000 --> 00:34:57.000
I'm not finished.

00:34:57.000 --> 00:35:01.000
Then my loop control is while I'm not finished.

00:35:01.000 --> 00:35:03.000
Now I read the value into the variable.

00:35:03.000 --> 00:35:05.000
Notice I'm only reading once.

00:35:05.000 --> 00:35:09.000
If the value is the sentinel, set finish to true.

00:35:09.000 --> 00:35:13.000
Otherwise, or else, process the variable.

00:35:13.000 --> 00:35:21.000
So this is the code for a flag-controlled sentinel loop.

00:35:21.000 --> 00:35:26.000
Finally, we can use what's called a loop-and-a-half idiom.

00:35:26.000 --> 00:35:31.000
Now, normally a loop has only one exit at the loop condition,

00:35:31.000 --> 00:35:34.000
at the while or the for.

00:35:34.000 --> 00:35:40.000
Some languages, however, allow you to exit from inside a loop.

00:35:40.000 --> 00:35:47.000
Ada, the language Ada, does this with its exit-when construct.

00:35:47.000 --> 00:35:51.000
Now in C++, you can do the same thing Ada does

00:35:51.000 --> 00:35:54.000
by using an if and a break.

00:35:54.000 --> 00:35:57.000
And so this is a loop-and-a-half.

00:35:57.000 --> 00:36:01.000
While there is more data to process,

00:36:01.000 --> 00:36:03.000
read the value.

00:36:03.000 --> 00:36:08.000
If the value is the sentinel, then exit or break.

00:36:08.000 --> 00:36:11.000
Process the variable.

00:36:11.000 --> 00:36:16.000
This is called the loop-and-a-half idiom, as I just mentioned.

00:36:16.000 --> 00:36:19.000
Now, many programmers don't like this.

00:36:19.000 --> 00:36:22.000
I actually am relatively fond of it.

00:36:22.000 --> 00:36:25.000
I think it's easy to understand.

00:36:25.000 --> 00:36:30.000
And there is a paper that you might want to look at.

00:36:30.000 --> 00:36:33.000
On the slides you can find the link to it.

00:36:33.000 --> 00:36:36.000
It's "Loop Exits in Structured Programming."

00:36:36.000 --> 00:36:39.000
Now, it's an old paper. It's from 1999.

00:36:39.000 --> 00:36:44.000
It's talking about the Pascal language, so it's not exactly up to date.

00:36:44.000 --> 00:36:47.000
But it, in fact, provides good reasons

00:36:47.000 --> 00:36:53.000
why this is actually a pretty good loop-control strategy.

00:36:53.000 --> 00:36:57.000
Why it's actually better than some of the other ones.

00:36:57.000 --> 00:36:59.000
Well, that's it for this lecture.

00:36:59.000 --> 00:37:02.000
We're going to follow up on these loop-and-a-half idioms

00:37:02.000 --> 00:37:05.000
and learn about exits in our next lecture

00:37:05.000 --> 00:37:08.000
when we're going to do more on loops.

00:37:08.000 --> 00:37:11.000
[no audio]

