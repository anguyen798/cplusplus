WEBVTT

00:00:00.000 --> 00:00:12.000
Hello everyone, this is Steve Gilbert. Welcome to lecture 23, where we're going to talk about dynamic memory and the heap.

00:00:12.000 --> 00:00:18.000
Now before we do that, we aren't quite finished with C-style strings.

00:00:18.000 --> 00:00:22.000
And to do that we're going to talk about command line arguments.

00:00:22.000 --> 00:00:29.000
So if you run a program, you all know how you pass arguments to a function.

00:00:29.000 --> 00:00:34.000
But how do you pass arguments to the function named main?

00:00:34.000 --> 00:00:38.000
Because main isn't called from another one of your functions.

00:00:38.000 --> 00:00:50.000
So if you want to pass arguments from outside your program to the main function when your program starts, you use a different version of main.

00:00:50.000 --> 00:01:03.000
And so these are always passed as an array of C-style strings, just like the count matches program we used in the last exercise.

00:01:03.000 --> 00:01:08.000
Now to collect them you can use one of these versions of main.

00:01:08.000 --> 00:01:14.000
Now this kind of should look a little familiar with you because it's kind of similar to what Java does.

00:01:14.000 --> 00:01:21.000
In Java you have public static void main string bracket bracket args.

00:01:21.000 --> 00:01:27.000
Well these two arguments are the string bracket bracket args part.

00:01:27.000 --> 00:01:34.000
Now argc, that first argument, is the number of strings on the command lines.

00:01:34.000 --> 00:01:39.000
You remember in Java, arrays have a length field.

00:01:39.000 --> 00:01:44.000
And so string bracket bracket args knows how many strings are in it.

00:01:44.000 --> 00:01:46.000
In C, they don't.

00:01:46.000 --> 00:01:50.000
And so we have to pass the number of strings on the command line.

00:01:50.000 --> 00:01:54.000
And that includes the executing program name.

00:01:54.000 --> 00:02:00.000
So argc will always contain at least the value 1 anytime you run a program.

00:02:00.000 --> 00:02:07.000
Because the name of the program, of course, is what you use to execute the program.

00:02:07.000 --> 00:02:14.000
Argv is an array of character pointers.

00:02:14.000 --> 00:02:18.000
Now again you might wonder why it's not a const char star.

00:02:18.000 --> 00:02:22.000
And that's because in C they didn't have const char stars.

00:02:22.000 --> 00:02:24.000
They just had char stars.

00:02:24.000 --> 00:02:31.000
And so this again has been inherited from C and it's something we use.

00:02:31.000 --> 00:02:38.000
Now you can use argc to check the number of arguments passed.

00:02:38.000 --> 00:02:42.000
So if argc is 1, then no argument was passed.

00:02:42.000 --> 00:02:45.000
And then you can print out some kind of error message.

00:02:45.000 --> 00:02:48.000
Typically this is called a usage message.

00:02:48.000 --> 00:02:53.000
You notice when I'm doing the usage message, I'm printing out the name of the program

00:02:53.000 --> 00:02:56.000
and then whatever arguments they should pass here.

00:02:56.000 --> 00:03:00.000
And I'm exiting from the program.

00:03:00.000 --> 00:03:04.000
So you can use argv sub 0 to get the name of the program

00:03:04.000 --> 00:03:10.000
and you can use c error to print out a usage kind of message.

00:03:10.000 --> 00:03:14.000
You can use exit or you can use return if no argument is passed.

00:03:14.000 --> 00:03:21.000
For instance, if you're running a program, it requires arguments.

00:03:21.000 --> 00:03:24.000
You don't want to go on and do anything else.

00:03:24.000 --> 00:03:27.000
You don't want to allow them to enter the answer.

00:03:27.000 --> 00:03:35.000
The argument needs to be passed on the command line.

00:03:35.000 --> 00:03:39.000
So if you want to process all arguments, you can use a loop.

00:03:39.000 --> 00:03:42.000
So here I'm printing out the name of the program

00:03:42.000 --> 00:03:47.000
and I'm going through all the rest of the items from 1 to argc

00:03:47.000 --> 00:03:51.000
and I'm printing out the argument names.

00:03:51.000 --> 00:03:58.000
Now argc counts the number of words on the command line

00:03:58.000 --> 00:04:01.000
but it doesn't count redirection parameters.

00:04:01.000 --> 00:04:05.000
So obviously here there's only one word on the command line.

00:04:05.000 --> 00:04:10.000
I'm running the program ex and argc is 1.

00:04:10.000 --> 00:04:16.000
Here I'm running the program ex and I'm passing arg1 and arg2, so argc is 3.

00:04:16.000 --> 00:04:21.000
Here I'm running the program ex and I'm passing arg1

00:04:21.000 --> 00:04:24.000
but I'm redirecting it to out.txt.

00:04:24.000 --> 00:04:30.000
So the redirection parameters, the little ampersand and the out.txt don't count.

00:04:30.000 --> 00:04:40.000
So this still is argc sub 2 instead of 1, 2, 3, 4.

00:04:40.000 --> 00:04:43.000
OK, let's go ahead and try it.

00:04:43.000 --> 00:04:49.000
So we're going to write a program called frp, file replace.

00:04:49.000 --> 00:04:53.000
We're going to do this really simply, it's not going to be very, very fancy.

00:04:53.000 --> 00:04:58.000
But the purpose of the program is to open a file and print it

00:04:58.000 --> 00:05:03.000
replacing every instance of a given word with another.

00:05:03.000 --> 00:05:10.000
Now when I say every instance, we're only going to count if it's found once on a line

00:05:10.000 --> 00:05:13.000
rather than multiple times.

00:05:13.000 --> 00:05:18.000
So the command line arguments are the name of the file to open,

00:05:18.000 --> 00:05:21.000
the word we want to search for,

00:05:21.000 --> 00:05:25.000
and the word to use as a replacement, which is optional.

00:05:25.000 --> 00:05:28.000
If they don't supply the word to use as a replacement,

00:05:28.000 --> 00:05:34.000
then we'll just skip or delete that word from the output printing.

00:05:34.000 --> 00:05:38.000
Now there are some error messages and a sample dialog in the handout

00:05:38.000 --> 00:05:43.000
and you're going to test your program by writing make tester.

00:05:43.000 --> 00:05:49.000
Because obviously we can't say make frp because that simply wouldn't work.

00:05:49.000 --> 00:05:55.000
Frp is a program where we're testing the main function.

00:05:55.000 --> 00:06:00.000
So let's go ahead over here and look at frp.

00:06:00.000 --> 00:06:04.000
So if there are less than two arguments supplied, we're going to print an error message.

00:06:04.000 --> 00:06:08.000
Two arguments open the input file for reading the file line by line,

00:06:08.000 --> 00:06:11.000
displaying the entire file on the console.

00:06:11.000 --> 00:06:14.000
With all arguments, the second argument removed.

00:06:14.000 --> 00:06:17.000
If we can't open the file, print an error message and exit.

00:06:17.000 --> 00:06:20.000
Three arguments open the end file for reading.

00:06:20.000 --> 00:06:24.000
Read the file line by line, displaying the entire file on the console.

00:06:24.000 --> 00:06:28.000
With all instances, the second argument replaced by the third.

00:06:28.000 --> 00:06:33.000
As you read the file line by line, use find to see if the desired string exists in the line

00:06:33.000 --> 00:06:41.000
and then use substring to display all but the character you're replacing, the word you're replacing.

00:06:41.000 --> 00:06:43.000
So here are some sample runs.

00:06:43.000 --> 00:06:50.000
So I said ./frp and it doesn't have its arguments.

00:06:50.000 --> 00:06:52.000
So it gives me the usage message.

00:06:52.000 --> 00:06:57.000
Frp, you're supposed to pass the file to open, the word defined,

00:06:57.000 --> 00:07:00.000
and then optionally what you want to replace it with.

00:07:00.000 --> 00:07:06.000
Okay, I'm going to try it again. ./frp data a1.txt

00:07:06.000 --> 00:07:16.000
Again, I have supplied at least the three arguments and so it gives me the usage message.

00:07:16.000 --> 00:07:23.000
Here I've said .frp data.ax.txt her.

00:07:23.000 --> 00:07:26.000
Well, this is okay for the command lines,

00:07:26.000 --> 00:07:32.000
but when it tries to open ax.txt it says it can't open the input file a.txt.

00:07:32.000 --> 00:07:39.000
The rest of them, here I'm trying to say, here's the original file a1.txt,

00:07:39.000 --> 00:07:44.000
here I'm saying ./frp data a1.txt her,

00:07:44.000 --> 00:07:49.000
and it's going to remove all the copies of her from inside here.

00:07:49.000 --> 00:07:55.000
Here I'm going to remove, place all copy of her with Alice's in the output.

00:07:55.000 --> 00:07:58.000
Now again, this is very simplistic.

00:07:58.000 --> 00:08:05.000
We're not doing very complex where her could appear in the word there, for instance.

00:08:05.000 --> 00:08:09.000
We're not checking to make sure that doesn't happen.

00:08:09.000 --> 00:08:12.000
We're also not checking to see if her appeared multiple times on the line

00:08:12.000 --> 00:08:14.000
and replacing all of them.

00:08:14.000 --> 00:08:17.000
That would be more complex processing.

00:08:17.000 --> 00:08:22.000
So let's go ahead and go into IC23,

00:08:22.000 --> 00:08:27.000
go into frp.cpp,

00:08:27.000 --> 00:08:30.000
and let's just write our code.

00:08:30.000 --> 00:08:34.000
The first thing, we need a different version of main, don't we?

00:08:34.000 --> 00:08:38.000
So we need to have int argc,

00:08:38.000 --> 00:08:46.000
and we need to have char star argv, bracket bracket.

00:08:46.000 --> 00:08:48.000
Second, we need to check argc.

00:08:48.000 --> 00:08:54.000
So if argc is less than 3,

00:08:54.000 --> 00:08:57.000
then we don't have the right number of command lines.

00:08:57.000 --> 00:09:07.000
And so we can do "sr usage".

00:09:07.000 --> 00:09:17.000
I'm just going to write, I'll use the argv sub 0.

00:09:17.000 --> 00:09:23.000
We're file to open.

00:09:23.000 --> 00:09:28.000
Second argument, we're defined.

00:09:28.000 --> 00:09:38.000
Our optional argument, replace with.

00:09:38.000 --> 00:09:43.000
Notice I'm printing this on CR.

00:09:43.000 --> 00:09:47.000
And I'm going to return a value here, since this is a main function.

00:09:47.000 --> 00:09:56.000
I'm going to return a value -1 in this case.

00:09:56.000 --> 00:09:59.000
Now, if I get down to line 12 here,

00:09:59.000 --> 00:10:06.000
I know that I have at least 3 words on the command line, or 2 arguments.

00:10:06.000 --> 00:10:11.000
And so I'm going to try and open the file name.

00:10:11.000 --> 00:10:17.000
So I'm going to say "if stream in",

00:10:17.000 --> 00:10:22.000
and I'm going to do "argv sub 1".

00:10:22.000 --> 00:10:27.000
"argv sub 0" is the name of the file, "argv sub 1" is the file name.

00:10:27.000 --> 00:10:29.000
Now I'm going to check if that worked.

00:10:29.000 --> 00:10:34.000
If "in" failed,

00:10:34.000 --> 00:10:46.000
"sr could not open argv sub 1".

00:10:46.000 --> 00:10:49.000
This time I'll return a different number,

00:10:49.000 --> 00:10:56.000
so someone running this program could tell from the numbers I return what the value is,

00:10:56.000 --> 00:11:01.000
or what the error was.

00:11:01.000 --> 00:11:04.000
OK, so now I've opened the file.

00:11:04.000 --> 00:11:09.000
I know that I have found,

00:11:09.000 --> 00:11:14.000
I've been able to open the file, I have at least the right number of command lines.

00:11:14.000 --> 00:11:17.000
And so I'm going to, and I often do,

00:11:17.000 --> 00:11:24.000
use the C++ string class to make the rest of this easier.

00:11:24.000 --> 00:11:29.000
So even though "argv" is all C-style strings,

00:11:29.000 --> 00:11:32.000
I can construct C++ strings.

00:11:32.000 --> 00:11:49.000
So I'm going to say "string word = argv sub 2".

00:11:49.000 --> 00:11:54.000
I'm going to say "string replace",

00:11:54.000 --> 00:11:58.000
of course that's going to be the empty string,

00:11:58.000 --> 00:12:06.000
and if "argc" is greater than 3,

00:12:06.000 --> 00:12:11.000
in other words if we have four words on the command line,

00:12:11.000 --> 00:12:25.000
then I'm going to say "replace = argv sub 3".

00:12:25.000 --> 00:12:29.000
OK, the fourth thing in the array.

00:12:29.000 --> 00:12:33.000
OK, now the rest of this is pretty straightforward.

00:12:33.000 --> 00:12:41.000
We're going to say "file",

00:12:41.000 --> 00:12:47.000
let's get a line here, "string line",

00:12:47.000 --> 00:12:53.000
"get line in line".

00:12:53.000 --> 00:12:59.000
Well we can read a line.

00:12:59.000 --> 00:13:06.000
First we want to find out if we can find the word inside there.

00:13:06.000 --> 00:13:13.000
So we'll say "autopause" or "sizeT" pause

00:13:13.000 --> 00:13:19.000
equals "line find word".

00:13:19.000 --> 00:13:28.000
Now if "pause" is not equal to "string in pause",

00:13:28.000 --> 00:13:34.000
probably remember this from the first couple of weeks,

00:13:34.000 --> 00:13:46.000
then we want to make "line" equals "line substring 0",

00:13:46.000 --> 00:13:52.000
"pause characters",

00:13:52.000 --> 00:13:57.000
plus whatever the replacement string is,

00:13:57.000 --> 00:14:03.000
plus "line substring",

00:14:03.000 --> 00:14:16.000
"pause" plus "word size",

00:14:16.000 --> 00:14:18.000
and that's the rest of it.

00:14:18.000 --> 00:14:23.000
Now as I mentioned, suppose the word appears multiple times,

00:14:23.000 --> 00:14:25.000
we're not checking that.

00:14:25.000 --> 00:14:29.000
Suppose the word appears inside another word,

00:14:29.000 --> 00:14:31.000
we're not checking that.

00:14:31.000 --> 00:14:37.000
Suppose if the word doesn't appear inside another word,

00:14:37.000 --> 00:14:40.000
what about the space before and after?

00:14:40.000 --> 00:14:45.000
Again, we're not checking that, we're assuming that the space is going to be OK.

00:14:45.000 --> 00:14:51.000
So, very rudimentary, just to show you how to use the command lines.

00:14:51.000 --> 00:15:00.000
And then we'll do "cout line endo".

00:15:00.000 --> 00:15:09.000
OK, so let's do a terminal here,

00:15:09.000 --> 00:15:19.000
and then let's do "make tester",

00:15:19.000 --> 00:15:29.000
and that didn't work.

00:15:29.000 --> 00:15:33.000
Let's do "make test".

00:15:33.000 --> 00:15:37.000
OK, I should have just done "make test" instead of "make tester".

00:15:37.000 --> 00:15:44.000
I'll change that on the slides, and I'll check on that later.

00:15:44.000 --> 00:15:51.000
Let me just change the slide right now.

00:15:51.000 --> 00:15:55.000
OK, so it checks the different command lines here to make sure they work,

00:15:55.000 --> 00:16:00.000
they all do, then it checks some different files to make sure it replaces

00:16:00.000 --> 00:16:04.000
one word with another word throughout there.

00:16:04.000 --> 00:16:08.000
And that works OK.

00:16:08.000 --> 00:16:17.000
Alright, let's go on.

00:16:17.000 --> 00:16:23.000
And go to our second topic today, which is the heap.

00:16:23.000 --> 00:16:33.000
Now, like Java and Pascal, C++ places variables on the heap using the new operator.

00:16:33.000 --> 00:16:37.000
So look at this little piece of Java code here.

00:16:37.000 --> 00:16:43.000
We create an int a and put 3 in it. That's put on the stack.

00:16:43.000 --> 00:16:47.000
We create a double b and put 5 in it. That's put on the stack.

00:16:47.000 --> 00:16:51.000
By the way, Java and C++ work the same way here.

00:16:51.000 --> 00:16:56.000
Then we create a scanner variable in. That's put on the stack.

00:16:56.000 --> 00:17:03.000
But we put a scanner object on the heap and point that variable to that scanner object

00:17:03.000 --> 00:17:06.000
by using the new operator.

00:17:06.000 --> 00:17:11.000
We do the same thing in C++.

00:17:11.000 --> 00:17:18.000
So variables are allocated on the heap by using the operator called new.

00:17:18.000 --> 00:17:22.000
The result that you get back from new is an address.

00:17:22.000 --> 00:17:26.000
And we will store that address in a pointer.

00:17:26.000 --> 00:17:28.000
So here's an example.

00:17:28.000 --> 00:17:33.000
So int *pi. pi is a pointer to int.

00:17:33.000 --> 00:17:41.000
And we initialize it with a new int with a value 3 inside it.

00:17:41.000 --> 00:17:45.000
Here, ia is a pointer to an int.

00:17:45.000 --> 00:17:54.000
And we initialize it with the address of the first element of a new array of 3 ints.

00:17:54.000 --> 00:17:57.000
So very, very similar to what you do in Java.

00:17:57.000 --> 00:18:00.000
Slightly different, but similar.

00:18:00.000 --> 00:18:06.000
The big difference is in Java, when you put something on the heap with new,

00:18:06.000 --> 00:18:15.000
Java will take care of returning that memory to the operating system so it can be reused.

00:18:15.000 --> 00:18:18.000
In C++, that is not the case.

00:18:18.000 --> 00:18:23.000
In C++, you are responsible for returning the memory to the system.

00:18:23.000 --> 00:18:31.000
And so you do that with the operator delete, which is paired with the operator new.

00:18:31.000 --> 00:18:37.000
If you use a plain new, like new int, then you use delete on the pointer.

00:18:37.000 --> 00:18:39.000
Delete p1.

00:18:39.000 --> 00:18:45.000
If you use the array version of new, new int bracket bracket,

00:18:45.000 --> 00:18:50.000
you use the array version of delete.

00:18:50.000 --> 00:18:54.000
So I'm going to show you an example of this.

00:18:54.000 --> 00:18:58.000
And I'm not sure how this is going to work with this recording.

00:18:58.000 --> 00:19:00.000
So I'm going to try this.

00:19:00.000 --> 00:19:09.000
I may have to get the page off of another.

00:19:09.000 --> 00:19:18.000
I want to continue.

00:19:18.000 --> 00:19:25.000
So it dropped it over on another page here.

00:19:25.000 --> 00:19:29.000
So I have a program here that creates an int a1.

00:19:29.000 --> 00:19:32.000
Where is that variable going to be created?

00:19:32.000 --> 00:19:38.000
It's going to be created on the stack, and it's going to be initialized with 1.

00:19:38.000 --> 00:19:44.000
Now I'm going to create a new variable on the heap and a pointer on the stack.

00:19:44.000 --> 00:19:46.000
So b is a pointer.

00:19:46.000 --> 00:19:51.000
This new variable, which is unnamed, is pointed to by b.

00:19:51.000 --> 00:19:54.000
And so this is what we end up with.

00:19:54.000 --> 00:19:58.000
So this is a new object on the heap.

00:19:58.000 --> 00:20:03.000
Now in this visualizer here, it shows this as an array,

00:20:03.000 --> 00:20:06.000
but it's a single variable on the heap.

00:20:06.000 --> 00:20:10.000
Now I'm going to create a new array of 5 integers.

00:20:10.000 --> 00:20:13.000
I'm going to initialize the first 3.

00:20:13.000 --> 00:20:21.000
So notice I'm using new bracket bracket here, not just plain new.

00:20:21.000 --> 00:20:24.000
And so here I have my 5 elements on the heap.

00:20:24.000 --> 00:20:30.000
And finally I'm going to create an array of 3 variables on the stack.

00:20:30.000 --> 00:20:37.000
So int d bracket bracket equals 4, 5, and 6.

00:20:37.000 --> 00:20:40.000
And so you can see these are created on the heap.

00:20:40.000 --> 00:20:44.000
So this is what this looks like in memory.

00:20:44.000 --> 00:20:51.000
Now when I delete c, you remember c used the array version of new,

00:20:51.000 --> 00:20:54.000
and so I need to use the array version of delete.

00:20:54.000 --> 00:21:02.000
When I delete c, the memory on the heap is returned to the operating system.

00:21:02.000 --> 00:21:08.000
The pointer c is not changed, but it's no longer valid.

00:21:08.000 --> 00:21:13.000
That's why these visualizer people decided to use a poop emoji

00:21:13.000 --> 00:21:17.000
to show you that that pointer is no longer useful.

00:21:17.000 --> 00:21:22.000
The same thing with b. When I delete the pointer b,

00:21:22.000 --> 00:21:25.000
it doesn't really change the pointer, it makes it invalid,

00:21:25.000 --> 00:21:29.000
but it's just the same address, it's not really touched.

00:21:29.000 --> 00:21:33.000
But the thing that was on the heap goes away.

00:21:33.000 --> 00:21:42.000
And so that's what this new and delete works like.

00:21:42.000 --> 00:21:48.000
So let's introduce some dynamic variables and do an actual exercise.

00:21:48.000 --> 00:21:52.000
So we're going to request some memory on the heap.

00:21:52.000 --> 00:21:55.000
We're going to allocate memory on the heap with the new operator.

00:21:55.000 --> 00:22:01.000
So let me show you the different ways that we can use the new operator.

00:22:01.000 --> 00:22:05.000
We can say new and get an uninitialized variable.

00:22:05.000 --> 00:22:08.000
So new int will give me an int on the heap,

00:22:08.000 --> 00:22:13.000
p1 will point to it, but that int could have any value at all.

00:22:13.000 --> 00:22:17.000
If we say new int with braces around it,

00:22:17.000 --> 00:22:20.000
this is only available since C++11,

00:22:20.000 --> 00:22:25.000
we would get an int that was initialized to zero.

00:22:25.000 --> 00:22:30.000
If we say new int 3, here we can use either the braces or the parentheses,

00:22:30.000 --> 00:22:36.000
this will be directly initialized, one single integer.

00:22:36.000 --> 00:22:42.000
If we do new int square brackets, that's array new,

00:22:42.000 --> 00:22:46.000
that will give us an uninitialized array.

00:22:46.000 --> 00:22:51.000
If we use the braces around it, again only available since C++11,

00:22:51.000 --> 00:22:56.000
that will give us three integers that have the value zero.

00:22:56.000 --> 00:23:04.000
If we initialize it afterwards, we will get the 1, 2, 3, that will be initialized.

00:23:04.000 --> 00:23:07.000
If we did this with an object, like an employee,

00:23:07.000 --> 00:23:13.000
we would just do new employee and then initialize the employee like that.

00:23:13.000 --> 00:23:17.000
So let's go ahead to our exercise over here.

00:23:17.000 --> 00:23:22.000
Let's close firp and close that terminal.

00:23:22.000 --> 00:23:29.000
Let's go to B.

00:23:29.000 --> 00:23:34.000
Here are some automatic or stack based variables.

00:23:34.000 --> 00:23:40.000
An int, a double, a float, a char, a string, an array, an employee.

00:23:40.000 --> 00:23:46.000
Notice we print them just by using the name of the variable.

00:23:46.000 --> 00:23:51.000
We're going to create dynamic variables for each of these.

00:23:51.000 --> 00:23:54.000
Those dynamic variables are going to be unnamed,

00:23:54.000 --> 00:23:58.000
and they're going to be pointed to by a pointer.

00:23:58.000 --> 00:24:09.000
So I'm going to have int pointer ip for an int pointer equals new int.

00:24:09.000 --> 00:24:13.000
And I'll initialize, what was my int up there initialized to?

00:24:13.000 --> 00:24:15.000
It was initialized to 3.

00:24:15.000 --> 00:24:19.000
I'll initialize mine to 4 for this new one.

00:24:19.000 --> 00:24:22.000
So then we have a double.

00:24:22.000 --> 00:24:28.000
So int star dp equals new double.

00:24:28.000 --> 00:24:30.000
That was 2.5.

00:24:30.000 --> 00:24:35.000
I'll do this 3.5.

00:24:35.000 --> 00:24:40.000
Int, that's a double.

00:24:40.000 --> 00:24:41.000
A double pointer dp.

00:24:41.000 --> 00:24:44.000
This is a float pointer.

00:24:44.000 --> 00:24:50.000
Fp equals new float.

00:24:50.000 --> 00:24:51.000
That was 2.5f.

00:24:51.000 --> 00:24:53.000
I'll make this 3.5f.

00:24:53.000 --> 00:24:58.000
I'll make that 4.5f.

00:24:58.000 --> 00:25:01.000
And then a char pointer.

00:25:01.000 --> 00:25:11.000
So char pointer cp equals new char.

00:25:11.000 --> 00:25:16.000
Again, we can use braces or parentheses.

00:25:16.000 --> 00:25:21.000
And we want the character s.

00:25:21.000 --> 00:25:26.000
We want a string pointer.

00:25:26.000 --> 00:25:33.000
New string.

00:25:33.000 --> 00:25:34.000
That's my last name there.

00:25:34.000 --> 00:25:37.000
I used the first name in this one up here.

00:25:37.000 --> 00:25:40.000
We'll use an array.

00:25:40.000 --> 00:25:50.000
Int star ia instead of ip equals new int.

00:25:50.000 --> 00:25:53.000
This time we have to put in a value.

00:25:53.000 --> 00:25:55.000
So I'll put 3.

00:25:55.000 --> 00:26:00.000
And I'll put 4, 5, and 6.

00:26:00.000 --> 00:26:05.000
Now unlike regular arrays, when you initialize a new array on the heap,

00:26:05.000 --> 00:26:08.000
you have to supply a value here.

00:26:08.000 --> 00:26:14.000
So if we were to do this, which would be perfectly legal for --

00:26:14.000 --> 00:26:20.000
if we left off the --

00:26:20.000 --> 00:26:24.000
that would be perfectly legal, right?

00:26:24.000 --> 00:26:34.000
But for a new array,

00:26:34.000 --> 00:26:39.000
you have to put the size in there.

00:26:39.000 --> 00:26:42.000
And finally we had an employee, right?

00:26:42.000 --> 00:26:57.000
So employee pointer ep equals new employee.

00:26:57.000 --> 00:26:59.000
And we'll do a bill.

00:26:59.000 --> 00:27:07.000
And we'll give him a slightly higher salary, $24,000.

00:27:07.000 --> 00:27:12.000
Okay, so this creates the dynamic variables.

00:27:12.000 --> 00:27:21.000
Now we want to go ahead and print those dynamic variables.

00:27:21.000 --> 00:27:24.000
So let's look at how we would print each of those.

00:27:24.000 --> 00:27:31.000
So what I'm going to do is I'm going to take this here.

00:27:31.000 --> 00:27:39.000
I'm going to copy it right down here.

00:27:39.000 --> 00:27:43.000
Star ip.

00:27:43.000 --> 00:27:49.000
Star ip.

00:27:49.000 --> 00:27:54.000
Star dp.

00:27:54.000 --> 00:27:56.000
Star dp.

00:27:56.000 --> 00:28:02.000
Star fp.

00:28:02.000 --> 00:28:09.000
Star fp.

00:28:09.000 --> 00:28:15.000
Star cp.

00:28:15.000 --> 00:28:20.000
Star cp.

00:28:20.000 --> 00:28:25.000
Star sp.

00:28:25.000 --> 00:28:29.000
Star sp.

00:28:29.000 --> 00:28:33.000
So ia.

00:28:33.000 --> 00:28:38.000
And remember with pointers, we can use the subscript just like with an array.

00:28:38.000 --> 00:28:43.000
So I can say ia sub zero.

00:28:43.000 --> 00:28:48.000
Ia sub i.

00:28:48.000 --> 00:28:52.000
And finally the last one is an employee.

00:28:52.000 --> 00:28:55.000
This one's a little bit different because I don't have an employee.

00:28:55.000 --> 00:28:57.000
I have an employee pointer.

00:28:57.000 --> 00:29:05.000
And so we'd have to say ep not dot name but arrow name.

00:29:05.000 --> 00:29:14.000
And ep not dot salary but ep arrow salary.

00:29:14.000 --> 00:29:21.000
Okay, so let's open a shell on that.

00:29:21.000 --> 00:29:27.000
And let's do make test.

00:29:27.000 --> 00:29:31.000
Let's just do make run.

00:29:31.000 --> 00:29:44.000
Okay.

00:29:44.000 --> 00:29:48.000
Okay, so I got an error.

00:29:48.000 --> 00:29:57.000
Let's see how we created the employee up here originally.

00:29:57.000 --> 00:30:05.000
Okay, so we created the employee like that.

00:30:05.000 --> 00:30:08.000
So let's put the braces because it's a structure.

00:30:08.000 --> 00:30:14.000
It doesn't have a constructor, which we'll learn about a little bit later.

00:30:14.000 --> 00:30:19.000
And let's try that again.

00:30:19.000 --> 00:30:21.000
Make run.

00:30:21.000 --> 00:30:23.000
Okay, so an int is three.

00:30:23.000 --> 00:30:27.000
IP is four. 350, 450.

00:30:27.000 --> 00:30:30.000
CP is S.

00:30:30.000 --> 00:30:32.000
SP is Gilbert.

00:30:32.000 --> 00:30:34.000
An array is 456.

00:30:34.000 --> 00:30:36.000
And ep is Bill.

00:30:36.000 --> 00:30:41.000
And that looks like it works perfectly fine.

00:30:41.000 --> 00:30:44.000
But there's a slight, slight problem.

00:30:44.000 --> 00:30:47.000
There is a slight, slight problem.

00:30:47.000 --> 00:30:52.000
So let's look at that problem.

00:30:52.000 --> 00:30:54.000
We didn't have any errors.

00:30:54.000 --> 00:30:55.000
Is everything okay?

00:30:55.000 --> 00:30:57.000
No.

00:30:57.000 --> 00:31:07.000
Unlike Java or unlike C#, we are responsible for returning any memory to the operating system.

00:31:07.000 --> 00:31:14.000
The memory that's allocated on the heap is not automatically collected and reused.

00:31:14.000 --> 00:31:17.000
And so we have additional programs.

00:31:17.000 --> 00:31:22.000
One is called Valgrind in Java.

00:31:22.000 --> 00:31:24.000
Windows has its own program that does this.

00:31:24.000 --> 00:31:27.000
There's no universal way to do it.

00:31:27.000 --> 00:31:32.000
I've also used some Google memory checkers to check that.

00:31:32.000 --> 00:31:36.000
And I've put those in the make file.

00:31:36.000 --> 00:31:46.000
So if we do make grind, you'll see that it runs a memory detector on it.

00:31:46.000 --> 00:31:52.000
And at the end, it tells us, it runs the program up here, right, just like it normally would.

00:31:52.000 --> 00:31:57.000
But at the end, it tells us, oh, we lost some memory.

00:31:57.000 --> 00:32:07.000
And it's kind of telling us where it was lost on line 44, line 41, line 43, and line 42 and so forth.

00:32:07.000 --> 00:32:09.000
And line 46.

00:32:09.000 --> 00:32:17.000
And each of those, we allocated some memory, but we didn't free the memory.

00:32:17.000 --> 00:32:19.000
Now, that's one way.

00:32:19.000 --> 00:32:24.000
That's actually running our program by running a separate program called Valgrind.

00:32:24.000 --> 00:32:34.000
If you look at the make file here, you can see that it runs Valgrind and then just runs the executable after the executable is built.

00:32:34.000 --> 00:32:43.000
If we do make check, what it does is recompiles our code with a special kind of code inside it.

00:32:43.000 --> 00:32:47.000
And then checks it that way.

00:32:47.000 --> 00:32:51.000
So let's go ahead and do make check.

00:32:51.000 --> 00:32:55.000
And it just depends which one you want to use.

00:32:55.000 --> 00:33:00.000
So make check.

00:33:00.000 --> 00:33:04.000
And let me close that over to that way.

00:33:04.000 --> 00:33:10.000
And so basically we get the same information.

00:33:10.000 --> 00:33:19.000
We don't get the startup thing at the bottom of it, but it tells us at the bottom where our code is leaking.

00:33:19.000 --> 00:33:25.000
And it tells us here, you look for your piece of code, dynamic CPP line 47, 46.

00:33:25.000 --> 00:33:29.000
So both of those will give us the same piece of information.

00:33:29.000 --> 00:33:31.000
They do it in a slightly different way.

00:33:31.000 --> 00:33:36.000
If you use Valgrind, you don't have to put any special code inside your program to do it.

00:33:36.000 --> 00:33:41.000
It works automatically on code that has already been compiled.

00:33:41.000 --> 00:33:53.000
If you use the checker, it automatically has to recompile your code and add this extra checking code inside your code.

00:33:53.000 --> 00:33:55.000
So how do we fix this?

00:33:55.000 --> 00:33:59.000
How do we fix this problem so that it works correctly?

00:33:59.000 --> 00:34:03.000
What we do is we use delete or delete to return the memory.

00:34:03.000 --> 00:34:07.000
You delete the pointer to free the heap object.

00:34:07.000 --> 00:34:13.000
Just like the visualization I just showed you.

00:34:13.000 --> 00:34:19.000
So let's go back to our code.

00:34:19.000 --> 00:34:22.000
Let's bring this down here.

00:34:22.000 --> 00:34:51.000
So I have delete IP, delete DP, delete FP, delete SP, delete CP, delete IP.

00:34:51.000 --> 00:34:55.000
No, EP.

00:34:55.000 --> 00:35:05.000
And finally, bracket bracket, IA.

00:35:05.000 --> 00:35:11.000
So you have to check and fix the run time errors for each one.

00:35:11.000 --> 00:35:18.000
So once we've done that, you can do either make grind or make check.

00:35:18.000 --> 00:35:21.000
So make check.

00:35:21.000 --> 00:35:24.000
If we got all of them, we won't have any errors at the end of it.

00:35:24.000 --> 00:35:27.000
Make grind would do the same thing.

00:35:27.000 --> 00:35:30.000
Now what if we use the wrong version of delete for this?

00:35:30.000 --> 00:35:40.000
What if I for instance said delete IP or delete IA there without the brackets?

00:35:40.000 --> 00:35:48.000
Let's see what happens when we do make check.

00:35:48.000 --> 00:35:53.000
So notice that creates an error.

00:35:53.000 --> 00:35:57.000
So we're using operator new versus operator delete with the brackets.

00:35:57.000 --> 00:35:59.000
That's an error.

00:35:59.000 --> 00:36:05.000
And this actually aborts because it would create more errors.

00:36:05.000 --> 00:36:08.000
Because we're actually trying to allocate.

00:36:08.000 --> 00:36:14.000
We're trying to deallocate memory that's on the stack, which is not legal.

00:36:14.000 --> 00:36:26.000
And so you have to be careful to make sure that you use the correct version of new with the correct version of delete.

00:36:26.000 --> 00:36:36.000
Let's do it one last time.

00:36:36.000 --> 00:36:41.000
And no errors on that at all.

